{"version":3,"sources":["types/index_d.ts","utils/helpers.ts","redux/actions/ui.ts","redux/constants/ui.ts","redux/reducers/todo.ts","redux/constants/todo.ts","redux/reducers/ui.ts","redux/reduxStore.ts","components/Header/FoldersTreeView.tsx","assets/Buttons.tsx","components/Header/Dialogs/AddTagDialog.tsx","components/Header/Dialogs/EditTagDialog.tsx","redux/actions/todo.ts","components/Header/Dialogs/SetFolderDialog.tsx","components/Header/Dialogs/EditFolderDialog.tsx","components/Header/Header.tsx","assets/DraggableItem.tsx","assets/DroppableItem.tsx","components/ToDoList/TaskDetails/TaskDetails.tsx","components/ToDoList/ToDo.tsx","components/ToDoList/AddGoal.tsx","components/ToDoList/FolderLabel.tsx","components/ToDoList/ToDoList.tsx","components/Folders.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["DrawerTypeEnum","combineStyles","styles","reduce","style","cur","getIntSecondPart","str","symbol","parseInt","split","setDrawerModeAction","type","action","initialState","folders","id","headline","shown","goals","text","note","tag","undefined","checked","editing","tags","name","color","currentFolders","reducer","state","payload","folderId","reduceItem","folder","map","goal","goalIndex","length","filter","el","i","newFolder","from","to","fromFolderId","toFolderId","slice","idx","newGoal","goalIdx","newNote","taskId","tagId","newName","newHeadline","drawerMode","Menu","isLight","drawerOpened","pageTitle","open","newTitle","rootReducer","combineReducers","todo","ui","useTypedSelector","useSelector","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","array","index","useStyles","makeStyles","theme","labelText","fontWeight","flexGrow","labelIcon","labelRoot","display","alignItems","iconButton","palette","primary","main","iconAddButton","light","root","padding","listItem","height","paddingLeft","bottomListItem","moreIcon","minWidth","marginRight","FoldersTreeView","toggleTheme","addTag","openAddTag","openEditTag","openSetFolder","openEditFolder","setEditTagName","setEditTagId","setHeadline","setCurrentFolderId","classes","useState","foldersOpened","setFoldersOpened","tagsOpened","setTagsOpened","List","className","ListItem","button","onClick","ListItemIcon","ListItemText","Typography","variant","alignSelf","pointerEvents","ListItemSecondaryAction","IconButton","fontSize","Collapse","in","key","bold","cancel","active","CancelDialogButton","props","Button","DeleteDialogButton","delete","ApplyDialogButton","item","width","position","borderBottom","selected","borderTop","boxShadow","shadows","cursor","zIndex","marginBottom","paddingRight","textDecoration","notSelectable","userSelect","title","picker","AddTagDialog","setOpen","useTheme","setChecked","setColor","tagName","setTagName","handleClose","Dialog","onClose","DialogTitle","Input","value","onChange","e","target","DialogContent","borderLeft","checkbox","Checkbox","edge","onChangeComplete","newColor","event","console","log","hex","DialogActions","EditTagDialog","setNewName","dispatch","useDispatch","editTag","editTagAction","useEffect","SetFolderDialog","addFolder","folderName","addFolderAction","placeholder","autoFocus","EditFolderDialog","setNewHeadline","editFolder","folderIdEdit","editFolderAction","isMobile","Android","navigator","userAgent","match","BlackBerry","iOS","Opera","Windows","any","appBar","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","background","menuButton","spacing","hide","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","justifyContent","content","link","listText","trashCan","trashCanContainer","bottom","switcher","switcherText","textAlign","moon","grey","sun","Header","children","innerWidth","drawerWidth","setDrawerWidth","addTagOpened","setAddTagOpened","editTagOpened","setEditTagOpened","folderSetOpened","setFolderSetOpened","editFolderOpened","setEditFolderOpened","editTagId","currentFolderId","editTagName","addTagAction","setIsLight","setIsLightAction","handleResize","addEventListener","removeEventListener","handleDrawer","CssBaseline","AppBar","Toolbar","aria-label","noWrap","Drawer","anchor","paper","direction","marginLeft","DraggableItem","adding","getItemStyle","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","isDragging","DroppableItem","horizontal","droppableId","droppableProps","buttons","notes","flexDirection","taskInput","infoFontSize","notesLabel","marginTop","createdLabel","TaskDetails","setGoal","setNote","deleteTask","setTag","deleteTag","aria-labelledby","onKeyDown","fullWidth","Chip","label","secondary","borderColor","disabled","fontFamily","borderWidth","borderStyle","letterSpacing","onDelete","ToDo","toggleCheckbox","currentColor","Tooltip","placement","arrow","setGoalAction","setNoteAction","deleteTaskAction","setTagAction","deleteTagAction","textField","sendButton","border","icon","AddGoal","addGoal","addGoalAction","moving","setMoving","useSpring","opacity","transform","immediate","config","tension","onRest","useForm","register","handleSubmit","errors","reset","onSubmit","data","goalText","message","TextField","margin","inputRef","required","maxLength","error","helperText","div","borderRadius","divider","test","FolderLabel","anchorEl","setAnchorEl","tooltipOpened","setTooltipOpened","setCurrentFolders","setCurrentFoldersAction","foldersCount","Divider","orientation","currentTarget","keepMounted","Boolean","MenuItem","list","ToDoList","currentFolder","toggleChecked","toggleCheckedAction","draggableStyle","align","toString","Folders","swapTasks","swapTasksAction","onDragEnd","result","destination","source","lightTheme","createMuiTheme","success","dark","default","darkTheme","disabledBackground","App","setDrawerOpened","setDrawerOpenedAction","ThemeProvider","path","render","exact","MainApp","location","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.185c66ac.chunk.js","sourcesContent":["import { TodosAction } from \"./../redux/reducers/todo\";\r\nimport { UiAction } from \"./../redux/reducers/ui\";\r\nexport type GoalType = {\r\n    id: number;\r\n    text: string;\r\n    note: string;\r\n    tag: number | undefined;\r\n    checked: boolean;\r\n    editing: boolean;\r\n};\r\n\r\nexport type FolderType = {\r\n    id: number;\r\n    headline: string;\r\n    shown: boolean;\r\n    goals: Array<GoalType>;\r\n};\r\n\r\nexport type FolderFormDataType = {\r\n    headline: string;\r\n    description: string;\r\n};\r\n\r\nexport type TaskFormDataType = {\r\n    goalText: string;\r\n};\r\n\r\nexport enum DrawerTypeEnum {\r\n    Menu = 1,\r\n    Back,\r\n}\r\n\r\nexport type TagType = {\r\n    name: string;\r\n    color: string;\r\n};\r\n\r\nexport type MyActionType = UiAction | TodosAction;\r\n","export const combineStyles = (styles: Array<string>) => {\r\n\treturn styles.reduce((style, cur) => style + \" , \" + cur);\r\n};\r\n\r\nexport const random = (min: number, max: number) => {\r\n\treturn Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nexport const randomColor = () => {\r\n\tlet letters = \"0123456789ABCDEF\";\r\n\tlet color = \"#\";\r\n\tfor (let i = 0; i < 6; ++i) color += letters[Math.floor(Math.random() * 16)];\r\n\treturn color;\r\n};\r\n\r\nexport const getIntSecondPart = (str: string, symbol: string): number => {\r\n\treturn parseInt(str.split(symbol)[1]);\r\n};\r\n","import { action } from \"typesafe-actions\";\r\nimport * as constants from \"../constants/ui\";\r\nimport { DrawerTypeEnum } from \"../../types/index_d\";\r\n\r\nexport const setDrawerModeAction = (type: DrawerTypeEnum) =>\r\n    action(constants.SET_DRAWER_MODE, { type });\r\n\r\nexport const setIsLightAction = (isLight: boolean) =>\r\n    action(constants.SET_IS_LIGHT, { isLight });\r\n\r\nexport const setDrawerOpenedAction = (open: boolean) =>\r\n    action(constants.SET_DRAWER_OPENED, { open });\r\n\r\nexport const setPageTitleAction = (newTitle: string) =>\r\n    action(constants.SET_PAGE_TITLE, { newTitle });\r\n","export const SET_DRAWER_MODE = \"ui/SET_DRAWER_MODE\";\r\nexport const SET_IS_LIGHT = \"ui/SET_IS_LIGHT\";\r\nexport const SET_DRAWER_OPENED = \"ui/SET_DRAWER_OPENED\";\r\nexport const SET_PAGE_TITLE = \"ui/SET_PAGE_TITLE\";\r\n","import { setDrawerModeAction } from \"./../actions/ui\";\r\nimport { ActionType } from \"typesafe-actions\";\r\nimport * as actions from \"../actions/todo\";\r\nimport * as constants from \"./../constants/todo\";\r\nimport { reduceItem } from \"../reduxStore\";\r\nimport { TagType } from \"../../types/index_d\";\r\n\r\nconst initialState = {\r\n    folders: [\r\n        {\r\n            id: 0,\r\n            headline: \"Purchasing\",\r\n            shown: true,\r\n            goals: [\r\n                {\r\n                    id: 0,\r\n                    text: \"onion\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: true,\r\n                    editing: false,\r\n                },\r\n                {\r\n                    id: 1,\r\n                    text: \"carrot\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: false,\r\n                    editing: false,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    text: \"cucumber\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: false,\r\n                    editing: false,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            id: 1,\r\n            headline: \"Goals\",\r\n            shown: true,\r\n            goals: [\r\n                {\r\n                    id: 0,\r\n                    text: \"Watch 4 anime\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: true,\r\n                    editing: false,\r\n                },\r\n                {\r\n                    id: 1,\r\n                    text: \"Watch 5 anime\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: false,\r\n                    editing: false,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    text: \"Watch 7 anime\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: false,\r\n                    editing: false,\r\n                },\r\n                {\r\n                    id: 3,\r\n                    text: \"Watch 9 anime\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: false,\r\n                    editing: false,\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            id: 2,\r\n            headline: \"Headline\",\r\n            shown: true,\r\n            goals: [\r\n                {\r\n                    id: 0,\r\n                    text: \"Watch 4 anime\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: true,\r\n                    editing: false,\r\n                },\r\n                {\r\n                    id: 1,\r\n                    text: \"Watch 5 anime\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: false,\r\n                    editing: false,\r\n                },\r\n                {\r\n                    id: 2,\r\n                    text: \"Watch 7 anime\",\r\n                    note: \"don't forget to smile\",\r\n                    tag: undefined as undefined | number,\r\n                    checked: false,\r\n                    editing: false,\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n    tags: [\r\n        { name: \"important\", color: \"hotpink\" },\r\n        { name: \"work\", color: \"blue\" },\r\n    ] as Array<TagType>,\r\n    currentFolders: [0, 1, 2] as number[],\r\n};\r\n\r\ntype StateType = typeof initialState;\r\nexport type TodosAction = ActionType<typeof actions>;\r\n\r\nconst reducer = (state = initialState, action: TodosAction): StateType => {\r\n    switch (action.type) {\r\n        case constants.TOGGLE_CHECKED: {\r\n            const { id, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => {\r\n                    return {\r\n                        ...folder,\r\n                        goals: folder.goals.map((goal, goalIndex) => {\r\n                            if (goalIndex === id) {\r\n                                return {\r\n                                    ...goal,\r\n                                    checked: !goal.checked,\r\n                                };\r\n                            } else {\r\n                                return goal;\r\n                            }\r\n                        }),\r\n                    };\r\n                }),\r\n            };\r\n        }\r\n        case constants.ADD_GOAL: {\r\n            const { text, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => {\r\n                    return {\r\n                        ...folder,\r\n                        goals: [\r\n                            ...folder.goals,\r\n                            {\r\n                                id: state.folders[folderId].goals.length,\r\n                                text: text,\r\n                                note: \"\",\r\n                                tag: undefined as undefined | number,\r\n                                checked: false,\r\n                                editing: false,\r\n                            },\r\n                        ],\r\n                    };\r\n                }),\r\n            };\r\n        }\r\n        case constants.DELETE_FOLDER: {\r\n            const { id } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: state.folders\r\n                    .filter((el) => id !== el.id)\r\n                    .map((folder, i) => ({ ...folder, id: i })),\r\n            };\r\n        }\r\n        case constants.DELETE_DONE: {\r\n            const { folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => {\r\n                    return {\r\n                        ...folder,\r\n                        goals: folder.goals\r\n                            .filter((goal) => !goal.checked)\r\n                            .map((goal, i) => ({\r\n                                ...goal,\r\n                                id: i,\r\n                            })),\r\n                    };\r\n                }),\r\n            };\r\n        }\r\n        case constants.ADD_FOLDER: {\r\n            const { headline } = action.payload;\r\n\r\n            const newFolder = {\r\n                id: state.folders.length,\r\n                headline: headline,\r\n                setDrawerModeAction,\r\n                shown: false,\r\n                goals: [],\r\n            };\r\n            return {\r\n                ...state,\r\n                folders: [...state.folders, newFolder],\r\n            };\r\n        }\r\n        case constants.SWAP_TASKS: {\r\n            let { from, to, fromFolderId, toFolderId } = action.payload;\r\n\r\n            if (fromFolderId === toFolderId) {\r\n                return {\r\n                    ...state,\r\n                    folders: reduceItem(\r\n                        state.folders,\r\n                        fromFolderId,\r\n                        (folder) => ({\r\n                            ...folder,\r\n                            goals: (to > from\r\n                                ? [\r\n                                      ...folder.goals.slice(0, from),\r\n                                      ...folder.goals.slice(from + 1, to + 1),\r\n                                      folder.goals[from],\r\n                                      ...folder.goals.slice(\r\n                                          to + 1,\r\n                                          folder.goals.length\r\n                                      ),\r\n                                  ]\r\n                                : [\r\n                                      ...folder.goals.slice(0, to),\r\n                                      folder.goals[from],\r\n                                      ...folder.goals.slice(to, from),\r\n                                      ...folder.goals.slice(\r\n                                          from + 1,\r\n                                          folder.goals.length\r\n                                      ),\r\n                                  ]\r\n                            ).map((goal, i) => ({\r\n                                ...goal,\r\n                                id: i,\r\n                            })),\r\n                        })\r\n                    ),\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                folders: state.folders.map((folder, folderId) => {\r\n                    if (folderId === fromFolderId) {\r\n                        return {\r\n                            ...folder,\r\n                            goals: [\r\n                                ...folder.goals.slice(0, from),\r\n                                ...folder.goals.slice(\r\n                                    from + 1,\r\n                                    folder.goals.length\r\n                                ),\r\n                            ].map((folder, i) => ({ ...folder, id: i })),\r\n                        };\r\n                    }\r\n                    if (folderId === toFolderId) {\r\n                        return {\r\n                            ...folder,\r\n                            goals: [\r\n                                ...folder.goals.slice(0, to),\r\n                                state.folders[fromFolderId].goals[from],\r\n                                ...folder.goals.slice(\r\n                                    to,\r\n                                    state.folders.length + 1\r\n                                ),\r\n                            ].map((folder, i) => ({ ...folder, id: i })),\r\n                        };\r\n                    }\r\n                    return folder;\r\n                }),\r\n            };\r\n        }\r\n        case constants.SWAP_FOLDERS: {\r\n            let { from, to } = action.payload;\r\n\r\n            return {\r\n                ...state,\r\n                folders: (to > from\r\n                    ? [\r\n                          ...state.folders.slice(0, from),\r\n                          ...state.folders.slice(from + 1, to + 1),\r\n                          state.folders[from],\r\n                          ...state.folders.slice(to + 1, state.folders.length),\r\n                      ]\r\n                    : [\r\n                          ...state.folders.slice(0, to),\r\n                          state.folders[from],\r\n                          ...state.folders.slice(to, from),\r\n                          ...state.folders.slice(\r\n                              from + 1,\r\n                              state.folders.length\r\n                          ),\r\n                      ]\r\n                ).map((folder, i) => ({ ...folder, id: i })),\r\n            };\r\n        }\r\n        case constants.START_EDITING: {\r\n            const { id, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => ({\r\n                    ...folder,\r\n                    goals: folder.goals.map((goal, idx) => {\r\n                        if (idx !== id) return goal;\r\n                        return { ...goal, editing: !goal.editing };\r\n                    }),\r\n                })),\r\n            };\r\n        }\r\n        case constants.SET_GOAL: {\r\n            const { id, newGoal, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => ({\r\n                    ...folder,\r\n                    goals: folder.goals.map((goal, goalIdx) => {\r\n                        if (goalIdx !== id) return goal;\r\n                        return {\r\n                            ...goal,\r\n                            text: newGoal,\r\n                        };\r\n                    }),\r\n                })),\r\n            };\r\n        }\r\n        case constants.DELETE_CURRENT_FOLDER: {\r\n            const { folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: state.folders\r\n                    .filter((folder) => folder.id !== folderId)\r\n                    .map((folder, i) => ({ ...folder, id: i })),\r\n            };\r\n        }\r\n        case constants.SET_NOTE: {\r\n            const { id, newNote, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => ({\r\n                    ...folder,\r\n                    goals: folder.goals.map((goal, i) => {\r\n                        if (i === id) return { ...goal, note: newNote };\r\n                        else return goal;\r\n                    }),\r\n                })),\r\n            };\r\n        }\r\n        case constants.DELETE_TASK: {\r\n            const { taskId, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => ({\r\n                    ...folder,\r\n                    goals: folder.goals\r\n                        .filter((goal) => goal.id !== taskId)\r\n                        .map((goal, i) => ({ ...goal, id: i })),\r\n                })),\r\n            };\r\n        }\r\n        case constants.SET_TAG: {\r\n            const { taskId, tagId, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => ({\r\n                    ...folder,\r\n                    goals: folder.goals.map((goal) => {\r\n                        if (goal.id === taskId)\r\n                            return {\r\n                                ...goal,\r\n                                tag: tagId,\r\n                            };\r\n                        else return goal;\r\n                    }),\r\n                })),\r\n            };\r\n        }\r\n        case constants.DELETE_TAG: {\r\n            const { tagId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: state.folders.map((folder) => {\r\n                    return {\r\n                        ...folder,\r\n                        goals: folder.goals.map((goal) => {\r\n                            if (goal.tag === undefined || goal.tag < tagId)\r\n                                return goal;\r\n                            if (goal.tag === tagId)\r\n                                return {\r\n                                    ...goal,\r\n                                    tag: undefined as number | undefined,\r\n                                };\r\n                            if (goal.tag > tagId)\r\n                                return {\r\n                                    ...goal,\r\n                                    tag: (goal.tag - 1) as number | undefined,\r\n                                };\r\n                            return goal;\r\n                        }),\r\n                    };\r\n                }),\r\n                tags: state.tags.filter((tag, id) => id !== tagId),\r\n            };\r\n        }\r\n        case constants.ADD_TAG: {\r\n            const { name, color } = action.payload;\r\n            return {\r\n                ...state,\r\n                tags: [...state.tags, { name, color }],\r\n            };\r\n        }\r\n        case constants.EDIT_TAG: {\r\n            const { tagId, newName } = action.payload;\r\n            return {\r\n                ...state,\r\n                tags: reduceItem(state.tags, tagId, (tag) => ({\r\n                    ...tag,\r\n                    name: newName,\r\n                })),\r\n            };\r\n        }\r\n        case constants.EDIT_FOLDER: {\r\n            const { newHeadline, folderId } = action.payload;\r\n            return {\r\n                ...state,\r\n                folders: reduceItem(state.folders, folderId, (folder) => ({\r\n                    ...folder,\r\n                    headline: newHeadline,\r\n                })),\r\n            };\r\n        }\r\n        case constants.SET_CURRENT_FOLDERS: {\r\n            const { from, folderId } = action.payload;\r\n            //console.log(\"from\", from, \"folderId\", folderId);\r\n            return {\r\n                ...state,\r\n                folders: state.folders.map((folder) => {\r\n                    if (folder.id === from) return { ...folder, shown: false };\r\n                    if (folder.id === folderId)\r\n                        return { ...folder, shown: true };\r\n                    return folder;\r\n                }),\r\n                currentFolders: state.currentFolders.map((id) => {\r\n                    if (id === from) return folderId;\r\n                    return id;\r\n                }),\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","export const TOGGLE_CHECKED = \"todo/TOGGLE_CHECKED\";\r\nexport const ADD_GOAL = \"todo/ADD_GOAL\";\r\nexport const DELETE_FOLDER = \"todo/DELETE_FOLDER\";\r\nexport const DELETE_DONE = \"todo/DELETE_DONE\";\r\nexport const ADD_FOLDER = \"todo/ADD_FOLDER\";\r\nexport const SWAP_TASKS = \"todo/SWAP_TASKS\";\r\nexport const SWAP_FOLDERS = \"todo/SWAP_FOLDERS\";\r\nexport const UNDO_DELETE_TASKS = \"todo/UNDO_DELETE_TASKS\";\r\nexport const START_EDITING = \"todo/START_EDITING\";\r\nexport const SET_GOAL = \"todo/SET_GOAL\";\r\nexport const DELETE_CURRENT_FOLDER = \"todo/DELETE_CURRENT_FOLDER\";\r\nexport const SET_NOTE = \"todo/SET_NOTE\";\r\nexport const DELETE_TASK = \"todo/DELETE_TASK\";\r\nexport const SET_TAG = \"todo/SET_TAG\";\r\nexport const DELETE_TAG = \"todo/DELETE_TAG\";\r\nexport const ADD_TAG = \"todo/ADD_TAG\";\r\nexport const EDIT_TAG = \"todo/EDIT_TAG\";\r\nexport const EDIT_FOLDER = \"todo/EDIT_FOLDER\";\r\nexport const SET_CURRENT_FOLDERS = \"todo/SET_CURRENT_FOLDERS\";\r\n","import { DrawerTypeEnum } from \"./../../types/index_d\";\r\nimport { ActionType } from \"typesafe-actions\";\r\nimport * as actions from \"../actions/ui\";\r\nimport * as constants from \"./../constants/ui\";\r\n\r\nconst initialState = {\r\n    drawerMode: DrawerTypeEnum.Menu,\r\n    isLight: true,\r\n    drawerOpened: false,\r\n    pageTitle: \"To do list\",\r\n};\r\n\r\nexport type UiAction = ActionType<typeof actions>;\r\ntype StateType = typeof initialState;\r\n\r\nconst reducer = (state = initialState, action: UiAction): StateType => {\r\n    switch (action.type) {\r\n        case constants.SET_DRAWER_MODE: {\r\n            const { type } = action.payload;\r\n            return {\r\n                ...state,\r\n                drawerMode: type,\r\n            };\r\n        }\r\n        case constants.SET_IS_LIGHT: {\r\n            const { isLight } = action.payload;\r\n            return {\r\n                ...state,\r\n                isLight,\r\n            };\r\n        }\r\n        case constants.SET_DRAWER_OPENED: {\r\n            const { open } = action.payload;\r\n            return {\r\n                ...state,\r\n                drawerOpened: open,\r\n            };\r\n        }\r\n        case constants.SET_PAGE_TITLE: {\r\n            const { newTitle } = action.payload;\r\n            return {\r\n                ...state,\r\n                pageTitle: newTitle,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport todo from \"./reducers/todo\";\r\nimport ui from \"./reducers/ui\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todo: todo,\r\n    ui: ui,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // required for Redux extension\r\n\r\nlet store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport const reduceItem = <T>(\r\n    array: ReadonlyArray<T>,\r\n    index: number,\r\n    reducer: (value: T) => T\r\n): T[] => [\r\n    ...array.slice(0, index),\r\n    reducer(array[index]),\r\n    ...array.slice(index + 1),\r\n];\r\n\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Theme,\r\n    makeStyles,\r\n    StyleRules,\r\n    Typography,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Collapse,\r\n    ListItemSecondaryAction,\r\n    ListItemIcon,\r\n} from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/EditRounded\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { combineStyles } from \"../../utils/helpers\";\r\nimport MoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport LessIcon from \"@material-ui/icons/ChevronRight\";\r\nimport { useTypedSelector } from \"../../redux/reduxStore\";\r\n\r\ntype PropsType = {\r\n    toggleTheme: () => void;\r\n    addTag: (name: string, color: string) => void;\r\n    isLight: boolean;\r\n    openAddTag: () => void;\r\n    openEditTag: () => void;\r\n    openSetFolder: () => void;\r\n    openEditFolder: () => void;\r\n    setEditTagName: (name: string) => void;\r\n    setEditTagId: (id: number) => void;\r\n    setHeadline: (headline: string) => void;\r\n    setCurrentFolderId: (id: number) => void;\r\n};\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme): StyleRules<string> => ({\r\n        labelText: {\r\n            fontWeight: \"inherit\",\r\n            flexGrow: 1,\r\n        },\r\n        labelIcon: {\r\n            //marginRight: theme.spacing(1),\r\n        },\r\n        labelRoot: {\r\n            display: \"flex\",\r\n            alignItems: \"left\",\r\n        },\r\n        iconButton: {\r\n            \"&:hover\": {\r\n                color: theme.palette.primary.main,\r\n            },\r\n        },\r\n        iconAddButton: {\r\n            \"&:hover\": {\r\n                color: theme.palette.primary.light,\r\n            },\r\n        },\r\n        root: {\r\n            padding: 0,\r\n        },\r\n        listItem: {\r\n            height: \"50px\",\r\n            paddingLeft: 0,\r\n        },\r\n        bottomListItem: {\r\n            paddingLeft: \"40px\",\r\n        },\r\n        moreIcon: {\r\n            minWidth: 0,\r\n            marginRight: \"5px\",\r\n        },\r\n    })\r\n);\r\n\r\nconst FoldersTreeView = ({\r\n    toggleTheme,\r\n    addTag,\r\n    isLight,\r\n    openAddTag,\r\n    openEditTag,\r\n    openSetFolder,\r\n    openEditFolder,\r\n    setEditTagName,\r\n    setEditTagId,\r\n    setHeadline,\r\n    setCurrentFolderId,\r\n}: PropsType) => {\r\n    //const theme = useTheme();\r\n    const classes = useStyles();\r\n    const [foldersOpened, setFoldersOpened] = useState(false);\r\n    const [tagsOpened, setTagsOpened] = useState(false);\r\n\r\n    const tags = useTypedSelector((state) => state.todo.tags);\r\n    const folders = useTypedSelector((state) => state.todo.folders);\r\n\r\n    const toggleFoldersOpen = () => {\r\n        setFoldersOpened(!foldersOpened);\r\n    };\r\n    const toggleTagsOpened = () => {\r\n        setTagsOpened(!tagsOpened);\r\n    };\r\n    return (\r\n        <List className={classes.root}>\r\n            <ListItem\r\n                button\r\n                onClick={toggleFoldersOpen}\r\n                className={classes.listItem}\r\n            >\r\n                <ListItemIcon className={classes.moreIcon}>\r\n                    {foldersOpened ? <MoreIcon /> : <LessIcon />}\r\n                </ListItemIcon>\r\n                <ListItemText>\r\n                    <div className={classes.labelRoot}>\r\n                        <Typography\r\n                            variant=\"h5\"\r\n                            className={classes.labelText}\r\n                            style={{\r\n                                alignSelf: \"center\",\r\n                                pointerEvents: \"none\",\r\n                            }}\r\n                        >\r\n                            Folders\r\n                        </Typography>\r\n                    </div>\r\n                </ListItemText>\r\n                <ListItemSecondaryAction>\r\n                    {foldersOpened ? (\r\n                        <IconButton\r\n                            className={classes.iconAddButton}\r\n                            onClick={openSetFolder}\r\n                        >\r\n                            <AddIcon\r\n                                style={{\r\n                                    fontSize: \"1.2em\",\r\n                                }}\r\n                            />\r\n                        </IconButton>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Collapse in={foldersOpened}>\r\n                {folders.map((folder) => {\r\n                    return (\r\n                        <ListItem\r\n                            key={\"tree-item-node-\" + folder.id}\r\n                            className={combineStyles([\r\n                                classes.bottomListItem,\r\n                                classes.listItem,\r\n                            ])}\r\n                        >\r\n                            <ListItemText>\r\n                                <div className={classes.labelRoot}>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        className={classes.labelText}\r\n                                    >\r\n                                        {folder.headline}\r\n                                    </Typography>\r\n                                </div>\r\n                            </ListItemText>\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton\r\n                                    className={classes.iconButton}\r\n                                    onClick={() => {\r\n                                        setHeadline(folder.headline);\r\n                                        setCurrentFolderId(folder.id);\r\n                                        openEditFolder();\r\n                                    }}\r\n                                >\r\n                                    <EditIcon style={{ fontSize: \"0.8em\" }} />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </Collapse>\r\n            <ListItem\r\n                button\r\n                onClick={toggleTagsOpened}\r\n                className={classes.listItem}\r\n            >\r\n                <ListItemIcon className={classes.moreIcon}>\r\n                    {tagsOpened ? <MoreIcon /> : <LessIcon />}\r\n                </ListItemIcon>\r\n                <ListItemText>\r\n                    <div className={classes.labelRoot}>\r\n                        <Typography\r\n                            variant=\"h5\"\r\n                            className={classes.labelText}\r\n                            style={{\r\n                                alignSelf: \"center\",\r\n                                pointerEvents: \"none\",\r\n                            }}\r\n                        >\r\n                            Tags\r\n                        </Typography>\r\n                    </div>\r\n                </ListItemText>\r\n                <ListItemSecondaryAction>\r\n                    {tagsOpened ? (\r\n                        <IconButton\r\n                            className={classes.iconAddButton}\r\n                            onClick={openAddTag}\r\n                        >\r\n                            <AddIcon style={{ fontSize: \"1.2em\" }} />\r\n                        </IconButton>\r\n                    ) : (\r\n                        <></>\r\n                    )}\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <Collapse in={tagsOpened}>\r\n                {tags.map((tag, id) => {\r\n                    return (\r\n                        <ListItem\r\n                            key={\"tree-item-node-\" + tag.name}\r\n                            className={combineStyles([\r\n                                classes.bottomListItem,\r\n                                classes.listItem,\r\n                            ])}\r\n                        >\r\n                            <ListItemText>\r\n                                <div className={classes.labelRoot}>\r\n                                    <Typography\r\n                                        variant=\"h6\"\r\n                                        className={classes.labelText}\r\n                                        style={{ color: tag.color }}\r\n                                    >\r\n                                        {\"#\" + tag.name}\r\n                                    </Typography>\r\n                                </div>\r\n                            </ListItemText>\r\n                            <ListItemSecondaryAction>\r\n                                <IconButton\r\n                                    onClick={() => {\r\n                                        openEditTag();\r\n                                        setEditTagId(id);\r\n                                        setEditTagName(tag.name);\r\n                                    }}\r\n                                    className={classes.iconButton}\r\n                                >\r\n                                    <EditIcon style={{ fontSize: \"0.8em\" }} />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    );\r\n                })}\r\n            </Collapse>\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default FoldersTreeView;\r\n","import React from \"react\";\r\nimport {\r\n\tStyleRules,\r\n\tTheme,\r\n\tmakeStyles,\r\n\tButton,\r\n\tButtonProps,\r\n} from \"@material-ui/core\";\r\nimport { combineStyles } from \"../utils/helpers\";\r\n\r\nconst useStyles = makeStyles(\r\n\t(theme: Theme): StyleRules<string> => ({\r\n\t\tbold: {\r\n\t\t\tfontWeight: \"bold\",\r\n\t\t\tcolor: \"white\",\r\n\t\t},\r\n\t\tcancel: {\r\n\t\t\tcolor: theme.palette.action.active,\r\n\t\t},\r\n\t})\r\n);\r\n\r\nexport const CancelDialogButton = (props: ButtonProps) => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<Button\r\n\t\t\t{...props}\r\n\t\t\tclassName={combineStyles([classes.cancel, classes.bold])}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport const DeleteDialogButton = (props: ButtonProps) => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<Button\r\n\t\t\t{...props}\r\n\t\t\tclassName={combineStyles([classes.delete, classes.bold])}\r\n\t\t\tvariant=\"contained\"\r\n\t\t\tcolor=\"secondary\"\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport const ApplyDialogButton = (props: ButtonProps) => {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<Button\r\n\t\t\t{...props}\r\n\t\t\tclassName={classes.bold}\r\n\t\t\tvariant=\"contained\"\r\n\t\t\tcolor=\"primary\"\r\n\t\t/>\r\n\t);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport {\r\n\tDialog,\r\n\tDialogTitle,\r\n\tDialogContent,\r\n\tInput,\r\n\tDialogActions,\r\n\tCheckbox,\r\n\tTheme,\r\n\tStyleRules,\r\n\tmakeStyles,\r\n\tuseTheme,\r\n} from \"@material-ui/core\";\r\nimport { ColorResult, HuePicker } from \"react-color\";\r\nimport { CancelDialogButton, ApplyDialogButton } from \"../../../assets/Buttons\";\r\nimport { combineStyles } from \"../../../utils/helpers\";\r\n\r\nconst useStyles = makeStyles(\r\n\t(theme: Theme): StyleRules<string> => ({\r\n\t\titem: {\r\n\t\t\twidth: \"100%\",\r\n\t\t\theight: \"100%\",\r\n\t\t\tposition: \"relative\",\r\n\t\t\tborderBottom: \"1px solid \" + theme.palette.action.selected,\r\n\t\t\tborderTop: \"1px solid \" + theme.palette.action.selected,\r\n\t\t\tboxShadow: theme.shadows[3],\r\n\t\t\tcursor: \"default\",\r\n\t\t\tzIndex: 0,\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\tmarginBottom: \"20px\",\r\n\t\t\tpaddingRight: \"15px\",\r\n\t\t\tpaddingLeft: \"15px\",\r\n\t\t},\r\n\t\tchecked: {\r\n\t\t\ttextDecoration: \"line-through\",\r\n\t\t},\r\n\t\tnotSelectable: {\r\n\t\t\tuserSelect: \"none\",\r\n\t\t\talignSelf: \"center\",\r\n\t\t\tflexGrow: 1,\r\n\t\t},\r\n\t\ttitle: {\r\n\t\t\twidth: \"400px\",\r\n\t\t},\r\n\t\tpicker: {\r\n\t\t\twidth: \"400px\",\r\n\t\t},\r\n\t})\r\n);\r\n\r\ntype PropsType = {\r\n\topen: boolean;\r\n\tsetOpen: (open: boolean) => void;\r\n\taddTag: (name: string, color: string) => void;\r\n};\r\n\r\nconst AddTagDialog = ({ open, setOpen, addTag }: PropsType) => {\r\n\tconst classes = useStyles();\r\n\tconst theme = useTheme();\r\n\tconst [checked, setChecked] = useState(false);\r\n\tconst [color, setColor] = useState(theme.palette.primary.main);\r\n\tconst [tagName, setTagName] = useState(\"New tag\");\r\n\tconst handleClose = () => {\r\n\t\tsetOpen(false);\r\n\t};\r\n\tconst toggleCheckbox = () => {\r\n\t\tsetChecked(!checked);\r\n\t};\r\n\tconst handleChangeComplete = (\r\n\t\tnewColor: ColorResult,\r\n\t\tevent: React.ChangeEvent<HTMLInputElement>\r\n\t) => {\r\n\t\tconsole.log(newColor, event);\r\n\t\tsetColor(newColor.hex);\r\n\t};\r\n\tconst handleChange = (newColor: ColorResult) => {\r\n\t\tsetColor(newColor.hex);\r\n\t};\r\n\tconst handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetTagName(e.target.value);\r\n\t};\r\n\tconst handleAddTag = () => {\r\n\t\taddTag(tagName, color);\r\n\t\tsetOpen(false);\r\n\t};\r\n\treturn (\r\n\t\t<Dialog open={open} onClose={handleClose}>\r\n\t\t\t<DialogTitle className={classes.title}>\r\n\t\t\t\t<Input\r\n\t\t\t\t\tvalue={tagName}\r\n\t\t\t\t\tstyle={{ fontSize: \"1.6em\" }}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t/>\r\n\t\t\t</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={classes.item}\r\n\t\t\t\t\tstyle={{ borderLeft: \"4px solid \" + color }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tclassName={combineStyles([\r\n\t\t\t\t\t\t\tchecked ? classes.checked : \"\",\r\n\t\t\t\t\t\t\tclasses.notSelectable,\r\n\t\t\t\t\t\t])}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tExample text\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\t<div className={classes.checkbox}>\r\n\t\t\t\t\t\t<Checkbox\r\n\t\t\t\t\t\t\tedge=\"end\"\r\n\t\t\t\t\t\t\tchecked={checked}\r\n\t\t\t\t\t\t\tonChange={toggleCheckbox}\r\n\t\t\t\t\t\t\tvalue={0}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<HuePicker\r\n\t\t\t\t\tclassName={classes.picker}\r\n\t\t\t\t\tcolor={color}\r\n\t\t\t\t\tonChangeComplete={handleChangeComplete}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t/>\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogActions>\r\n\t\t\t\t<CancelDialogButton onClick={handleClose}>Cancel</CancelDialogButton>\r\n\t\t\t\t<ApplyDialogButton onClick={handleAddTag}>Add</ApplyDialogButton>\r\n\t\t\t</DialogActions>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default AddTagDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Dialog, DialogTitle, Input, DialogActions } from \"@material-ui/core\";\r\nimport { ApplyDialogButton, CancelDialogButton } from \"../../../assets/Buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { editTagAction } from \"../../../redux/actions/todo\";\r\n\r\ntype PropsType = {\r\n    open: boolean;\r\n    setOpen: (open: boolean) => void;\r\n    tagName: string;\r\n    tagId: number;\r\n};\r\n\r\nconst EditTagDialog = ({ open, setOpen, tagId, tagName }: PropsType) => {\r\n    const [newName, setNewName] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n\r\n    const editTag = (tagId: number, newName: string) =>\r\n        dispatch(editTagAction(tagId, newName));\r\n\r\n    useEffect(() => {\r\n        setNewName(tagName);\r\n    }, [tagName]);\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleEdit = () => {\r\n        editTag(tagId, newName);\r\n        handleClose();\r\n    };\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.target.value);\r\n    };\r\n    return (\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>\r\n                <Input\r\n                    onChange={handleChange}\r\n                    value={newName}\r\n                    style={{ fontSize: \"1.6em\" }}\r\n                />\r\n            </DialogTitle>\r\n            <DialogActions>\r\n                <CancelDialogButton onClick={handleClose}>\r\n                    Cancel\r\n                </CancelDialogButton>\r\n                <ApplyDialogButton onClick={handleEdit}>Save</ApplyDialogButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default EditTagDialog;\r\n","import { action } from \"typesafe-actions\";\r\nimport * as constants from \"./../constants/todo\";\r\n\r\nexport const toggleCheckedAction = (id: number, folderId: number) =>\r\n    action(constants.TOGGLE_CHECKED, { id, folderId });\r\n\r\nexport const addGoalAction = (text: string, folderId: number) =>\r\n    action(constants.ADD_GOAL, { text, folderId });\r\n\r\nexport const deleteFolderAction = (id: number) =>\r\n    action(constants.DELETE_FOLDER, { id });\r\n\r\nexport const deleteDoneAction = (folderId: number) =>\r\n    action(constants.DELETE_DONE, { folderId });\r\n\r\nexport const addFolderAction = (headline: string) =>\r\n    action(constants.ADD_FOLDER, { headline });\r\n\r\nexport const swapTasksAction = (\r\n    from: number,\r\n    to: number,\r\n    fromFolderId: number,\r\n    toFolderId: number\r\n) => action(constants.SWAP_TASKS, { from, to, fromFolderId, toFolderId });\r\n\r\nexport const swapFoldersAction = (from: number, to: number) =>\r\n    action(constants.SWAP_FOLDERS, { from, to });\r\n\r\nexport const toggleEditingAction = (id: number, folderId: number) =>\r\n    action(constants.START_EDITING, { id, folderId });\r\n\r\nexport const setGoalAction = (id: number, newGoal: string, folderId: number) =>\r\n    action(constants.SET_GOAL, { id, newGoal, folderId });\r\n\r\nexport const deleteCurrentFolderAction = (folderId: number) =>\r\n    action(constants.DELETE_CURRENT_FOLDER, { folderId });\r\n\r\nexport const setNoteAction = (id: number, newNote: string, folderId: number) =>\r\n    action(constants.SET_NOTE, { id, newNote, folderId });\r\n\r\nexport const deleteTaskAction = (taskId: number, folderId: number) =>\r\n    action(constants.DELETE_TASK, { taskId, folderId });\r\n\r\nexport const setTagAction = (taskId: number, tagId: number, folderId: number) =>\r\n    action(constants.SET_TAG, { taskId, tagId, folderId });\r\n\r\nexport const deleteTagAction = (tagId: number) =>\r\n    action(constants.DELETE_TAG, { tagId });\r\n\r\nexport const addTagAction = (name: string, color: string) =>\r\n    action(constants.ADD_TAG, { name, color });\r\n\r\nexport const editTagAction = (tagId: number, newName: string) =>\r\n    action(constants.EDIT_TAG, { tagId, newName });\r\n\r\nexport const editFolderAction = (newHeadline: string, folderId: number) =>\r\n    action(constants.EDIT_FOLDER, { newHeadline, folderId });\r\n\r\nexport const setCurrentFoldersAction = (from: number, folderId: number) =>\r\n    action(constants.SET_CURRENT_FOLDERS, { from, folderId });\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    Input,\r\n    DialogContent,\r\n    DialogActions,\r\n} from \"@material-ui/core\";\r\nimport { CancelDialogButton, ApplyDialogButton } from \"../../../assets/Buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addFolderAction } from \"../../../redux/actions/todo\";\r\n\r\ntype PropsType = {\r\n    open: boolean;\r\n    setOpen: (open: boolean) => void;\r\n};\r\n\r\nconst SetFolderDialog = ({ open, setOpen }: PropsType) => {\r\n    const [headline, setHeadline] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n    const addFolder = (folderName: string) =>\r\n        dispatch(addFolderAction(folderName));\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleChange = (e: any) => {\r\n        setHeadline(e.target.value);\r\n    };\r\n    const handleAddFolder = () => {\r\n        addFolder(headline);\r\n        setHeadline(\"\");\r\n        handleClose();\r\n    };\r\n    return (\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>\r\n                <span style={{ fontSize: \"1.6em\" }}>Add folder</span>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Input\r\n                    style={{ fontSize: \"1.3em\" }}\r\n                    placeholder=\"Folder name\"\r\n                    value={headline}\r\n                    autoFocus\r\n                    onChange={handleChange}\r\n                ></Input>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <CancelDialogButton onClick={handleClose}>\r\n                    Cancel\r\n                </CancelDialogButton>\r\n                <ApplyDialogButton onClick={handleAddFolder}>\r\n                    Add\r\n                </ApplyDialogButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default SetFolderDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Dialog, DialogTitle, DialogActions, Input } from \"@material-ui/core\";\r\nimport { CancelDialogButton, ApplyDialogButton } from \"../../../assets/Buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { editFolderAction } from \"../../../redux/actions/todo\";\r\n\r\ntype PropsType = {\r\n    headline: string;\r\n    open: boolean;\r\n    setOpen: (open: boolean) => void;\r\n    folderId: number;\r\n};\r\n\r\nconst EditFolderDialog = ({ open, setOpen, headline, folderId }: PropsType) => {\r\n    const dispatch = useDispatch();\r\n    const [newHeadline, setNewHeadline] = useState(headline);\r\n    useEffect(() => {\r\n        setNewHeadline(headline);\r\n    }, [headline]);\r\n    const editFolder = (newName: string, folderIdEdit: number) =>\r\n        dispatch(editFolderAction(newName, folderIdEdit));\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewHeadline(e.target.value);\r\n    };\r\n    const handleSave = () => {\r\n        editFolder(newHeadline, folderId);\r\n        handleClose();\r\n    };\r\n    return (\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle>\r\n                <Input\r\n                    style={{ fontSize: \"1.6em\" }}\r\n                    value={newHeadline}\r\n                    onChange={handleChange}\r\n                />\r\n            </DialogTitle>\r\n            <DialogActions>\r\n                <CancelDialogButton onClick={handleClose}>\r\n                    Cancel\r\n                </CancelDialogButton>\r\n                <ApplyDialogButton onClick={handleSave}>\r\n                    Apply\r\n                </ApplyDialogButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default EditFolderDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    makeStyles,\r\n    useTheme,\r\n    Theme,\r\n    StyleRules,\r\n} from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport FoldersTreeView from \"./FoldersTreeView\";\r\nimport AddTagDialog from \"./Dialogs/AddTagDialog\";\r\nimport EditTagDialog from \"./Dialogs/EditTagDialog\";\r\nimport SetFolderDialog from \"./Dialogs/SetFolderDialog\";\r\nimport EditFolderDialog from \"./Dialogs/EditFolderDialog\";\r\nimport SunIcon from \"@material-ui/icons/Brightness7\";\r\nimport MoonIcon from \"@material-ui/icons/Brightness4\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTagAction } from \"../../redux/actions/todo\";\r\nimport { setIsLightAction } from \"../../redux/actions/ui\";\r\n\r\nconst isMobile = {\r\n    Android: () => navigator.userAgent.match(/Android/i),\r\n    BlackBerry: () => navigator.userAgent.match(/BlackBerry/i),\r\n    iOS: () => navigator.userAgent.match(/iPhone|iPad|iPod/i),\r\n    Opera: () => navigator.userAgent.match(/Opera Mini/i),\r\n    Windows: () =>\r\n        navigator.userAgent.match(/IEMobile/i) ||\r\n        navigator.userAgent.match(/WPDesktop/i),\r\n    any: () =>\r\n        isMobile.Android() ||\r\n        isMobile.BlackBerry() ||\r\n        isMobile.iOS() ||\r\n        isMobile.Opera() ||\r\n        isMobile.Windows(),\r\n};\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme): StyleRules<string> => ({\r\n        root: {\r\n            display: \"flex\",\r\n            height: \"100vh\",\r\n        },\r\n        appBar: {\r\n            zIndex: theme.zIndex.drawer + 1,\r\n            transition: theme.transitions.create([\"margin\", \"width\"], {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n            background: theme.palette.type === \"dark\" ? \"#3700B3\" : \"#3F51B5\",\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        hide: {\r\n            display: \"none\",\r\n        },\r\n        drawer: {\r\n            flexShrink: 0,\r\n        },\r\n        drawerPaper: {\r\n            boxShadow: theme.shadows[3],\r\n        },\r\n        drawerHeader: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            ...theme.mixins.toolbar,\r\n            justifyContent: \"flex-end\",\r\n        },\r\n        content: {\r\n            flexGrow: 1,\r\n            transition: theme.transitions.create(\"margin\", {\r\n                easing: theme.transitions.easing.sharp,\r\n                duration: theme.transitions.duration.leavingScreen,\r\n            }),\r\n        },\r\n        link: {\r\n            textDecoration: \"none\",\r\n            color: \"black\",\r\n        },\r\n        listText: {\r\n            color: theme.palette.text.primary,\r\n        },\r\n        trashCan: {\r\n            color: \"white\",\r\n        },\r\n        title: { flexGrow: 1 },\r\n        trashCanContainer: {},\r\n        toolbar: {\r\n            paddingRight: theme.spacing(1.5),\r\n            paddingLeft: theme.spacing(3),\r\n        },\r\n        bottom: {\r\n            height: \"100%\",\r\n        },\r\n        switcher: {\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            alignItems: \"flex-end\",\r\n            justifyContent: \"flex-end\",\r\n        },\r\n        switcherText: {\r\n            flexGrow: 1,\r\n            textAlign: \"right\",\r\n        },\r\n        moon: {\r\n            \"&:hover\": {\r\n                color: theme.palette.grey[800],\r\n            },\r\n        },\r\n        sun: {\r\n            \"&:hover\": {\r\n                color: \"#fff59d\",\r\n            },\r\n        },\r\n    })\r\n);\r\n\r\ntype PropsType = {\r\n    isLight: boolean;\r\n    open: boolean;\r\n    setOpen: (open: boolean) => void;\r\n    children: React.ReactChild;\r\n};\r\n\r\nconst Header = ({ isLight, open, setOpen, children }: PropsType) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const [drawerWidth, setDrawerWidth] = useState(\r\n        window.innerWidth * (isMobile.any() ? 0.5 : 0.2)\r\n    );\r\n\r\n    const [addTagOpened, setAddTagOpened] = useState(false);\r\n    const [editTagOpened, setEditTagOpened] = useState(false);\r\n    const [folderSetOpened, setFolderSetOpened] = useState(false);\r\n    const [editFolderOpened, setEditFolderOpened] = useState(false);\r\n    const [headline, setHeadline] = useState(\"\");\r\n    const [editTagId, setEditTagId] = useState(0);\r\n    const [currentFolderId, setCurrentFolderId] = useState(0);\r\n    const [editTagName, setEditTagName] = useState(\"\");\r\n\r\n    const addTag = (name: string, color: string) =>\r\n        dispatch(addTagAction(name, color));\r\n    const setIsLight = (light: boolean) => dispatch(setIsLightAction(light));\r\n\r\n    const openAddTag = () => {\r\n        setAddTagOpened(true);\r\n    };\r\n    const openEditTag = () => {\r\n        setEditTagOpened(true);\r\n    };\r\n    const openSetFolder = () => {\r\n        setFolderSetOpened(true);\r\n    };\r\n    const openEditFolder = () => {\r\n        setEditFolderOpened(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            if (\r\n                drawerWidth !==\r\n                window.innerWidth * (isMobile.any() ? 0.5 : 0.2)\r\n            )\r\n                setDrawerWidth(\r\n                    window.innerWidth * (isMobile.any() ? 0.5 : 0.2)\r\n                );\r\n        };\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize);\r\n        };\r\n    }, [drawerWidth]);\r\n\r\n    const handleDrawer = () => {\r\n        setOpen(!open);\r\n    };\r\n\r\n    const toggleTheme = () => {\r\n        setIsLight(!isLight);\r\n    };\r\n\r\n    const handleToggleTheme = () => {\r\n        setIsLight(!isLight);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawer}\r\n                        edge=\"start\"\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\" noWrap className={classes.title}>\r\n                        To do list\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                style={{\r\n                    width: drawerWidth + \"px\",\r\n                }}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div\r\n                    className={classes.drawerHeader}\r\n                    style={{\r\n                        width: drawerWidth + \"px\",\r\n                    }}\r\n                >\r\n                    <IconButton onClick={handleDrawer}>\r\n                        {theme.direction === \"ltr\" ? (\r\n                            <ChevronLeftIcon />\r\n                        ) : (\r\n                            <ChevronRightIcon />\r\n                        )}\r\n                    </IconButton>\r\n                </div>\r\n                <FoldersTreeView\r\n                    addTag={addTag}\r\n                    toggleTheme={toggleTheme}\r\n                    isLight={isLight}\r\n                    openAddTag={openAddTag}\r\n                    openEditTag={openEditTag}\r\n                    openSetFolder={openSetFolder}\r\n                    setEditTagName={setEditTagName}\r\n                    setEditTagId={setEditTagId}\r\n                    openEditFolder={openEditFolder}\r\n                    setHeadline={setHeadline}\r\n                    setCurrentFolderId={setCurrentFolderId}\r\n                />\r\n                <div className={classes.bottom}>\r\n                    <div className={classes.switcher}>\r\n                        <IconButton onClick={handleToggleTheme}>\r\n                            {isLight ? (\r\n                                <MoonIcon className={classes.moon} />\r\n                            ) : (\r\n                                <SunIcon className={classes.sun} />\r\n                            )}\r\n                        </IconButton>\r\n                    </div>\r\n                </div>\r\n                <AddTagDialog\r\n                    setOpen={setAddTagOpened}\r\n                    open={addTagOpened}\r\n                    addTag={addTag}\r\n                />\r\n                <EditTagDialog\r\n                    setOpen={setEditTagOpened}\r\n                    open={editTagOpened}\r\n                    tagId={editTagId}\r\n                    tagName={editTagName}\r\n                />\r\n                <SetFolderDialog\r\n                    open={folderSetOpened}\r\n                    setOpen={setFolderSetOpened}\r\n                />\r\n                <EditFolderDialog\r\n                    headline={headline}\r\n                    open={editFolderOpened}\r\n                    setOpen={setEditFolderOpened}\r\n                    folderId={currentFolderId}\r\n                />\r\n            </Drawer>\r\n\r\n            <main\r\n                className={classes.content}\r\n                style={{\r\n                    marginLeft: -drawerWidth + \"px\",\r\n                }}\r\n            >\r\n                <div>\r\n                    <div className={classes.drawerHeader} />\r\n                    {children}\r\n                </div>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {\r\n\tDraggable,\r\n\tDraggableProvided,\r\n\tDraggableStateSnapshot,\r\n\tNotDraggingStyle,\r\n\tDraggingStyle,\r\n} from \"react-beautiful-dnd\";\r\n\r\ntype DraggableItemPropsType = {\r\n\tid: number;\r\n\tclassName?: string;\r\n\tchildren: React.ReactChild;\r\n\tadding: string;\r\n\tgetItemStyle?: (\r\n\t\tisDragging: boolean,\r\n\t\tdraggableProps: DraggingStyle | NotDraggingStyle | undefined\r\n\t) => object;\r\n};\r\n\r\nconst DraggableItem = ({\r\n\tadding,\r\n\tid,\r\n\tclassName,\r\n\tchildren,\r\n\tgetItemStyle,\r\n}: DraggableItemPropsType) => {\r\n\treturn (\r\n\t\t<Draggable draggableId={\"item-\" + adding + id} index={id}>\r\n\t\t\t{(provided: DraggableProvided, snapshot: DraggableStateSnapshot) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t\t{...provided.draggableProps}\r\n\t\t\t\t\t{...provided.dragHandleProps}\r\n\t\t\t\t\tstyle={\r\n\t\t\t\t\t\tgetItemStyle\r\n\t\t\t\t\t\t\t? getItemStyle(snapshot.isDragging, provided.draggableProps.style)\r\n\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclassName={className}\r\n\t\t\t\t>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Draggable>\r\n\t);\r\n};\r\n\r\nexport default DraggableItem;\r\n","import React from \"react\";\r\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\r\n\r\ntype DroppableItemPropsType = {\r\n\tclassName?: string;\r\n\thorizontal?: boolean;\r\n\tdroppableId: string;\r\n\tchildren: React.ReactChild;\r\n};\r\n\r\nconst DroppableItem = ({\r\n\tclassName,\r\n\thorizontal,\r\n\tdroppableId,\r\n\tchildren,\r\n}: DroppableItemPropsType) => {\r\n\treturn (\r\n\t\t<Droppable\r\n\t\t\tdroppableId={droppableId}\r\n\t\t\tdirection={horizontal ? \"horizontal\" : \"vertical\"}\r\n\t\t>\r\n\t\t\t{(provided: DroppableProvided) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\t{...provided.droppableProps}\r\n\t\t\t\t\tref={provided.innerRef}\r\n\t\t\t\t\tclassName={className}\r\n\t\t\t\t>\r\n\t\t\t\t\t{children}\r\n\t\t\t\t\t{provided.placeholder}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</Droppable>\r\n\t);\r\n};\r\n\r\nexport default DroppableItem;\r\n","import React from \"react\";\r\nimport {\r\n\tDialog,\r\n\tInput,\r\n\tDialogActions,\r\n\tmakeStyles,\r\n\tStyleRules,\r\n\tTheme,\r\n\tDialogTitle,\r\n\tTypography,\r\n\tDialogContent,\r\n\tuseTheme,\r\n} from \"@material-ui/core\";\r\nimport { GoalType, TagType } from \"../../../types/index_d\";\r\nimport { ApplyDialogButton, DeleteDialogButton } from \"../../../assets/Buttons\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\n\r\nconst useStyles = makeStyles(\r\n\t(theme: Theme): StyleRules<string> => ({\r\n\t\troot: {\r\n\t\t\tpadding: \"100px\",\r\n\t\t},\r\n\t\tbuttons: {\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\twidth: \"100%\",\r\n\t\t},\r\n\t\tbutton: {\r\n\t\t\twidth: \"50%\",\r\n\t\t},\r\n\t\tnotes: {\r\n\t\t\tdisplay: \"flex\",\r\n\t\t\tflexDirection: \"column\",\r\n\t\t},\r\n\t\ttaskInput: {\r\n\t\t\tfontSize: \"2em\",\r\n\t\t},\r\n\t\tinfoFontSize: {\r\n\t\t\tfontSize: \"1.3em\",\r\n\t\t},\r\n\t\tnotesLabel: {\r\n\t\t\tmarginTop: \"15px\",\r\n\t\t\tmarginBottom: \"5px\",\r\n\t\t},\r\n\t\tcreatedLabel: {\r\n\t\t\tmarginTop: \"5px\",\r\n\t\t\tmarginBottom: \"5px\",\r\n\t\t},\r\n\t})\r\n);\r\n\r\ntype PropsType = {\r\n\topen: boolean;\r\n\tsetOpen: (isOpen: boolean) => void;\r\n\tgoal: GoalType;\r\n\tsetGoal: (id: number, text: string, folderId: number) => void;\r\n\tsetNote: (id: number, newNote: string, folderId: number) => void;\r\n\tdeleteTask: (id: number, folderId: number) => void;\r\n\tsetTag: (taskId: number, tagId: number, folderId: number) => void;\r\n\ttags: Array<TagType>;\r\n\tdeleteTag: (tagId: number) => void;\r\n\tfolderId: number;\r\n};\r\n\r\nconst TaskDetails = ({\r\n\topen,\r\n\tgoal,\r\n\ttags,\r\n\tfolderId,\r\n\tsetOpen,\r\n\tsetGoal,\r\n\tsetNote,\r\n\tdeleteTask,\r\n\tsetTag,\r\n\tdeleteTag,\r\n}: PropsType) => {\r\n\tconst classes = useStyles();\r\n\tconst theme = useTheme();\r\n\tconst handleClose = () => {\r\n\t\tif (goal.text !== \"\") setOpen(false);\r\n\t};\r\n\tconst handleTaskChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.value.length <= 30) setGoal(goal.id, e.target.value, folderId);\r\n\t};\r\n\tconst handleNoteChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.value.length <= 40) setNote(goal.id, e.target.value, folderId);\r\n\t};\r\n\tconst deleteCurrentTask = () => {\r\n\t\tdeleteTask(goal.id, folderId);\r\n\t\thandleClose();\r\n\t};\r\n\tconst handleKeys = (e: React.KeyboardEvent) => {\r\n\t\tif (e.key === \"Enter\") handleClose();\r\n\t};\r\n\treturn (\r\n\t\t<Dialog\r\n\t\t\topen={open}\r\n\t\t\tonClose={handleClose}\r\n\t\t\taria-labelledby=\"add-task-dialog\"\r\n\t\t\tonKeyDown={handleKeys}\r\n\t\t>\r\n\t\t\t<DialogTitle id=\"task-dialog-title\">\r\n\t\t\t\t<Input\r\n\t\t\t\t\tclassName={classes.taskInput}\r\n\t\t\t\t\tvalue={goal.text}\r\n\t\t\t\t\tonChange={handleTaskChange}\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t/>\r\n\t\t\t</DialogTitle>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{tags.map((tag, tagId) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Chip\r\n\t\t\t\t\t\t\t\tkey={\"tags-\" + tag.name + tag.color}\r\n\t\t\t\t\t\t\t\tlabel={tag.name}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tcolor: theme.palette.text.secondary,\r\n\t\t\t\t\t\t\t\t\tborderColor:\r\n\t\t\t\t\t\t\t\t\t\ttagId === goal.tag\r\n\t\t\t\t\t\t\t\t\t\t\t? tag.color\r\n\t\t\t\t\t\t\t\t\t\t\t: theme.palette.action.disabled,\r\n\t\t\t\t\t\t\t\t\tfontSize: \"1em\",\r\n\t\t\t\t\t\t\t\t\tfontFamily: \"sans-serif\",\r\n\t\t\t\t\t\t\t\t\tfontWeight: \"bolder\",\r\n\t\t\t\t\t\t\t\t\tborderWidth: \"2px\",\r\n\t\t\t\t\t\t\t\t\tborderStyle: \"solid\",\r\n\t\t\t\t\t\t\t\t\tletterSpacing: \"0.05em\",\r\n\t\t\t\t\t\t\t\t\tmarginRight: \"5px\",\r\n\t\t\t\t\t\t\t\t\tmarginBottom: \"5px\",\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tonDelete={() => deleteTag(tagId)}\r\n\t\t\t\t\t\t\t\tonClick={() => setTag(goal.id, tagId, folderId)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={classes.notes}>\r\n\t\t\t\t\t<Typography\r\n\t\t\t\t\t\tvariant=\"h6\"\r\n\t\t\t\t\t\tcolor=\"textSecondary\"\r\n\t\t\t\t\t\tclassName={classes.notesLabel}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tNOTES\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Input\r\n\t\t\t\t\t\tvalue={goal.note}\r\n\t\t\t\t\t\tonChange={handleNoteChange}\r\n\t\t\t\t\t\tclassName={classes.infoFontSize}\r\n\t\t\t\t\t\tplaceholder=\"There is no notes, but you can change it!\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</DialogContent>\r\n\t\t\t<DialogContent>\r\n\t\t\t\t<DialogActions>\r\n\t\t\t\t\t<DeleteDialogButton onClick={deleteCurrentTask}>\r\n\t\t\t\t\t\tDelete task\r\n\t\t\t\t\t</DeleteDialogButton>\r\n\t\t\t\t\t<ApplyDialogButton onClick={handleClose}>Done</ApplyDialogButton>\r\n\t\t\t\t</DialogActions>\r\n\t\t\t</DialogContent>\r\n\t\t</Dialog>\r\n\t);\r\n};\r\n\r\nexport default TaskDetails;\r\n","import React, { useState } from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { GoalType } from \"./../../types/index_d\";\r\nimport TaskDetails from \"./TaskDetails/TaskDetails\";\r\nimport {\r\n    Theme,\r\n    makeStyles,\r\n    StyleRules,\r\n    useTheme,\r\n    Tooltip,\r\n} from \"@material-ui/core\";\r\nimport { combineStyles } from \"../../utils/helpers\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    setGoalAction,\r\n    setTagAction,\r\n    deleteTaskAction,\r\n    setNoteAction,\r\n    deleteTagAction,\r\n} from \"../../redux/actions/todo\";\r\nimport { useTypedSelector } from \"../../redux/reduxStore\";\r\n\r\nconst useStyles = (color: string) =>\r\n    makeStyles(\r\n        (theme: Theme): StyleRules<string> => ({\r\n            root: {},\r\n            item: {\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                position: \"relative\",\r\n                borderBottom: \"1px solid \" + theme.palette.action.selected,\r\n                borderTop: \"1px solid \" + theme.palette.action.selected,\r\n                boxShadow: theme.shadows[3],\r\n                cursor: \"default\",\r\n                zIndex: 0,\r\n                borderLeft:\r\n                    color === theme.palette.background.paper\r\n                        ? \"none\"\r\n                        : \"4px solid \" + color,\r\n            },\r\n            checked: {\r\n                textDecoration: \"line-through\",\r\n            },\r\n            notSelectable: {\r\n                userSelect: \"none\",\r\n            },\r\n        })\r\n    );\r\n\r\ntype PropsType = {\r\n    goal: GoalType;\r\n    folderId: number;\r\n    toggleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nconst ToDo = ({ goal, folderId, toggleCheckbox }: PropsType) => {\r\n    const [open, setOpen] = useState(false);\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    const tags = useTypedSelector((state) => state.todo.tags);\r\n\r\n    const setGoal = (id: number, text: string, folderId: number) =>\r\n        dispatch(setGoalAction(id, text, folderId));\r\n    const setNote = (id: number, newNote: string, folderId: number) =>\r\n        dispatch(setNoteAction(id, newNote, folderId));\r\n    const deleteTask = (id: number, folderId: number) =>\r\n        dispatch(deleteTaskAction(id, folderId));\r\n    const setTag = (taskId: number, tagId: number, folderId: number) =>\r\n        dispatch(setTagAction(taskId, tagId, folderId));\r\n    const deleteTag = (tagId: number) => dispatch(deleteTagAction(tagId));\r\n\r\n    const currentColor =\r\n        goal.tag === undefined\r\n            ? theme.palette.background.paper\r\n            : tags[goal.tag].color;\r\n    const classes = useStyles(currentColor)();\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <ListItem onClick={handleClick} className={classes.item}>\r\n                <Tooltip\r\n                    title={goal.tag === undefined ? \"\" : tags[goal.tag].name}\r\n                    placement=\"right\"\r\n                    arrow\r\n                >\r\n                    <span\r\n                        className={combineStyles([\r\n                            goal.checked ? classes.checked : \"\",\r\n                            classes.notSelectable,\r\n                        ])}\r\n                    >\r\n                        {goal.text}\r\n                    </span>\r\n                </Tooltip>\r\n                <ListItemSecondaryAction>\r\n                    <Checkbox\r\n                        edge=\"end\"\r\n                        checked={goal.checked}\r\n                        onChange={toggleCheckbox}\r\n                        value={goal.id}\r\n                    />\r\n                </ListItemSecondaryAction>\r\n            </ListItem>\r\n            <TaskDetails\r\n                open={open}\r\n                setOpen={setOpen}\r\n                goal={goal}\r\n                setGoal={setGoal}\r\n                setNote={setNote}\r\n                deleteTask={deleteTask}\r\n                setTag={setTag}\r\n                tags={tags}\r\n                deleteTag={deleteTag}\r\n                folderId={folderId}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDo;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Theme,\r\n    StyleRules,\r\n    makeStyles,\r\n    TextField,\r\n    IconButton,\r\n} from \"@material-ui/core\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport { TaskFormDataType } from \"../../types/index_d\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addGoalAction } from \"../../redux/actions/todo\";\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme): StyleRules<string> => ({\r\n        root: {\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            borderTop: \"2px solid \" + theme.palette.primary.main,\r\n            flexDirection: \"row\",\r\n            padding: \"10px\",\r\n        },\r\n        textField: {\r\n            marginRight: \"10px\",\r\n            width: \"90%\",\r\n        },\r\n        sendButton: {\r\n            border: \"1px solid darkgrey\",\r\n            marginTop: \"7px\",\r\n            height: \"40px\",\r\n            width: \"40px\",\r\n            padding: \"7px\",\r\n            flexGrow: 1,\r\n        },\r\n        icon: {\r\n            alignSelf: \"center\",\r\n        },\r\n    })\r\n);\r\n\r\ntype PropsType = {\r\n    folderId: number;\r\n};\r\n\r\nconst AddGoal = ({ folderId }: PropsType) => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const addGoal = (newGoal: string, folderId: number) =>\r\n        dispatch(addGoalAction(newGoal, folderId));\r\n    const [moving, setMoving] = useState(false);\r\n    const props = useSpring({\r\n        to: [\r\n            {\r\n                opacity: 0,\r\n                transform: \"translateY(-10px)\",\r\n                immediate: false,\r\n                config: { tension: 350 },\r\n            },\r\n            {\r\n                opacity: 0,\r\n                transform: \"translateY(10px)\",\r\n                immediate: true,\r\n            },\r\n            {\r\n                opacity: 1,\r\n                transform: \"translateY(0)\",\r\n                immediate: false,\r\n                config: { tension: 350 },\r\n            },\r\n        ],\r\n        onRest: () => {\r\n            setMoving(false);\r\n        },\r\n    });\r\n\r\n    const onSubmit = (data: TaskFormDataType, e: any) => {\r\n        addGoal(data.goalText, folderId);\r\n        reset();\r\n        if (!errors.goalText?.message) setMoving(true);\r\n    };\r\n\r\n    const { register, handleSubmit, errors, reset } = useForm<\r\n        TaskFormDataType\r\n    >();\r\n    return (\r\n        <form\r\n            key={folderId}\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            className={classes.root}\r\n        >\r\n            <TextField\r\n                name=\"goalText\"\r\n                className={classes.textField}\r\n                placeholder=\"Add goal\"\r\n                margin=\"dense\"\r\n                type=\"text\"\r\n                variant=\"outlined\"\r\n                inputRef={register({\r\n                    required: \"This field is required\",\r\n                    maxLength: {\r\n                        value: 30,\r\n                        message: \"Max goal length is 30\",\r\n                    },\r\n                })}\r\n                error={!!errors.goalText}\r\n                helperText={errors.goalText?.message}\r\n            />\r\n\r\n            <IconButton\r\n                className={classes.sendButton}\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n            >\r\n                <animated.div\r\n                    key={\"animated.div\" + folderId}\r\n                    style={moving ? props : {}}\r\n                >\r\n                    <ArrowUpwardIcon className={classes.icon} />\r\n                </animated.div>\r\n            </IconButton>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddGoal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    makeStyles,\r\n    Theme,\r\n    StyleRules,\r\n    Typography,\r\n    Divider,\r\n    useTheme,\r\n    Menu,\r\n    MenuItem,\r\n    Tooltip,\r\n} from \"@material-ui/core\";\r\nimport FolderIcon from \"@material-ui/icons/FolderOutlined\";\r\nimport { FolderType } from \"../../types/index_d\";\r\nimport { useTypedSelector } from \"../../redux/reduxStore\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCurrentFoldersAction } from \"../../redux/actions/todo\";\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme): StyleRules<string> => ({\r\n        root: {\r\n            display: \"flex\",\r\n            background: theme.palette.background.paper,\r\n            marginLeft: \"30px\",\r\n            marginRight: \"80px\",\r\n            marginTop: \"10px\",\r\n            borderRadius: \"100px\",\r\n            height: \"35px\",\r\n            padding: \"7px\",\r\n            alignItems: \"center\",\r\n        },\r\n        text: {\r\n            marginRight: \"20px\",\r\n        },\r\n        divider: {\r\n            marginRight: \"20px\",\r\n        },\r\n        test: {\r\n            display: \"inline-block\",\r\n        },\r\n        icon: {\r\n            marginRight: \"2px\",\r\n            \"&:hover\": {\r\n                color: theme.palette.primary.main,\r\n            },\r\n        },\r\n    })\r\n);\r\n\r\ntype PropsType = {\r\n    headline: string;\r\n    folders: ReadonlyArray<FolderType>;\r\n    folderId: number;\r\n};\r\n\r\nconst FolderLabel = ({ headline, folders, folderId }: PropsType) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [tooltipOpened, setTooltipOpened] = useState(false);\r\n\r\n    const setCurrentFolders = (from: number, folderId: number) =>\r\n        dispatch(setCurrentFoldersAction(from, folderId));\r\n\r\n    const foldersCount = useTypedSelector((state) => state.todo.folders.length);\r\n\r\n    const handleTooltipClose = () => {\r\n        setTooltipOpened(false);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const handleClick = (event: any) => {\r\n        if (foldersCount !== 3) setAnchorEl(event.currentTarget);\r\n        else setTooltipOpened(true);\r\n    };\r\n    return (\r\n        <div className={classes.test}>\r\n            <div className={classes.root}>\r\n                <Typography variant=\"h5\" className={classes.text}>\r\n                    {headline}\r\n                </Typography>\r\n                <Divider\r\n                    orientation=\"vertical\"\r\n                    className={classes.divider}\r\n                    style={{ background: theme.palette.divider, width: \"1px\" }}\r\n                />\r\n                <Tooltip\r\n                    placement=\"right\"\r\n                    open={tooltipOpened}\r\n                    onClose={handleTooltipClose}\r\n                    title=\"There is no active folders left\"\r\n                >\r\n                    <FolderIcon\r\n                        onClick={handleClick}\r\n                        className={classes.icon}\r\n                    />\r\n                </Tooltip>\r\n                {\r\n                    <Menu\r\n                        id=\"simple-menu\"\r\n                        anchorEl={anchorEl}\r\n                        keepMounted\r\n                        open={Boolean(anchorEl)}\r\n                        onClose={handleClose}\r\n                    >\r\n                        {folders.map((folder, id) => {\r\n                            if (folder.shown)\r\n                                return (\r\n                                    <div\r\n                                        key={\r\n                                            folder.headline + folder.id + \"menu\"\r\n                                        }\r\n                                    />\r\n                                );\r\n                            else\r\n                                return (\r\n                                    <MenuItem\r\n                                        key={\r\n                                            folder.headline + folder.id + \"menu\"\r\n                                        }\r\n                                        onClick={() => {\r\n                                            setCurrentFolders(folderId, id);\r\n                                            handleClose();\r\n                                        }}\r\n                                    >\r\n                                        {folder.headline}\r\n                                    </MenuItem>\r\n                                );\r\n                        })}\r\n                    </Menu>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FolderLabel;\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Theme, StyleRules, Typography, useTheme } from \"@material-ui/core\";\r\nimport DraggableItem from \"../../assets/DraggableItem\";\r\nimport DroppableItem from \"../../assets/DroppableItem\";\r\nimport ToDo from \"./ToDo\";\r\nimport { FolderType } from \"../../types/index_d\";\r\nimport AddGoal from \"./AddGoal\";\r\nimport { useTypedSelector } from \"../../redux/reduxStore\";\r\nimport { DraggingStyle, NotDraggingStyle } from \"react-beautiful-dnd\";\r\nimport FolderLabel from \"./FolderLabel\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toggleCheckedAction } from \"../../redux/actions/todo\";\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme): StyleRules<string> => ({\r\n        root: {\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n            paddingLeft: \"10px\",\r\n            paddingRight: \"10px\",\r\n        },\r\n        list: {\r\n            width: \"100%\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n        },\r\n        paper: {\r\n            height: \"80%\",\r\n            boxShadow: theme.shadows[6],\r\n            width: \"100%\",\r\n            marginTop: \"10px\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            background: theme.palette.background.paper,\r\n            borderRadius: \"10px\",\r\n        },\r\n        goals: {\r\n            padding: \"4%\",\r\n        },\r\n    })\r\n);\r\n\r\ninterface PropsType {\r\n    folderId: number;\r\n}\r\n\r\nconst ToDoList = ({ folderId }: PropsType) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const dispatch = useDispatch();\r\n    const folders = useTypedSelector((state) => state.todo.folders);\r\n    const currentFolder: FolderType = useTypedSelector(\r\n        (state) => state.todo.folders[folderId]\r\n    );\r\n\r\n    const toggleChecked = (id: number, folderId: number) =>\r\n        dispatch(toggleCheckedAction(id, folderId));\r\n\r\n    const toggleCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.value) toggleChecked(parseInt(e.target.value), folderId);\r\n    };\r\n\r\n    const getItemStyle = (\r\n        isDragging: boolean,\r\n        draggableStyle: DraggingStyle | NotDraggingStyle | undefined\r\n    ) => ({\r\n        background: isDragging\r\n            ? theme.palette.divider\r\n            : theme.palette.background.paper,\r\n        ...draggableStyle,\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <FolderLabel\r\n                folders={folders}\r\n                folderId={folderId}\r\n                headline={currentFolder.headline}\r\n            />\r\n            <div className={classes.paper}>\r\n                <div className={classes.goals}>\r\n                    <Typography align=\"center\" variant=\"h4\">\r\n                        {currentFolder.headline}\r\n                    </Typography>\r\n                    <DroppableItem droppableId={\"DroppableToDo-\" + folderId}>\r\n                        <List className={classes.list}>\r\n                            {currentFolder.goals.map((goal) => {\r\n                                return (\r\n                                    <DraggableItem\r\n                                        id={goal.id}\r\n                                        key={\r\n                                            \"Goal-id: \" +\r\n                                            goal.id +\r\n                                            \" Folder-id: \" +\r\n                                            folderId\r\n                                        }\r\n                                        adding={folderId.toString()}\r\n                                        getItemStyle={getItemStyle}\r\n                                    >\r\n                                        <ToDo\r\n                                            toggleCheckbox={toggleCheckbox}\r\n                                            folderId={folderId}\r\n                                            goal={goal}\r\n                                        />\r\n                                    </DraggableItem>\r\n                                );\r\n                            })}\r\n                        </List>\r\n                    </DroppableItem>\r\n                </div>\r\n                <AddGoal folderId={folderId} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\r\nimport { Theme, StyleRules, makeStyles } from \"@material-ui/core\";\r\nimport ToDoList from \"./ToDoList/ToDoList\";\r\nimport { useTypedSelector } from \"../redux/reduxStore\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { swapTasksAction } from \"../redux/actions/todo\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport { getIntSecondPart } from \"../utils/helpers\";\r\n\r\nconst useStyles = makeStyles(\r\n    (theme: Theme): StyleRules<string> => ({\r\n        root: {\r\n            display: \"flex\",\r\n        },\r\n    })\r\n);\r\n\r\nconst Folders = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const swapTasks = (\r\n        from: number,\r\n        to: number,\r\n        fromFolderId: number,\r\n        toFolderId: number\r\n    ) => dispatch(swapTasksAction(from, to, fromFolderId, toFolderId));\r\n    const currentFolders = useTypedSelector(\r\n        (state) => state.todo.currentFolders\r\n    );\r\n    const onDragEnd = (result: DropResult) => {\r\n        console.log(result.destination);\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        swapTasks(\r\n            result.source.index,\r\n            result.destination.index,\r\n            getIntSecondPart(result.source.droppableId, \"-\"),\r\n            getIntSecondPart(result.destination.droppableId, \"-\")\r\n        );\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <ToDoList folderId={currentFolders[0]} />\r\n                <ToDoList folderId={currentFolders[1]} />\r\n                <ToDoList folderId={currentFolders[2]} />\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Folders;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header/Header\";\r\nimport store, { useTypedSelector } from \"./redux/reduxStore\";\r\nimport { Provider, useDispatch } from \"react-redux\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { setDrawerOpenedAction } from \"./redux/actions/ui\";\r\nimport Folders from \"./components/Folders\";\r\n\r\nconst lightTheme = createMuiTheme({\r\n    palette: {\r\n        type: \"light\",\r\n        success: {\r\n            main: \"#558B2F\",\r\n            dark: \"#33691E\",\r\n        },\r\n        background: {\r\n            default: \"#D3D3D3\",\r\n        },\r\n    },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: {\r\n            main: \"#E87509\",\r\n            dark: \"#C04D09\",\r\n        },\r\n        success: {\r\n            main: \"#558B2F\",\r\n            dark: \"#33691E\",\r\n        },\r\n        secondary: {\r\n            main: \"#FF69B4\",\r\n        },\r\n        action: {\r\n            disabledBackground: \"#121212\",\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const isLight = useTypedSelector((state) => state.ui.isLight);\r\n    const drawerOpened = useTypedSelector((state) => state.ui.drawerOpened);\r\n\r\n    const setDrawerOpened = (open: boolean) =>\r\n        dispatch(setDrawerOpenedAction(open));\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <ThemeProvider theme={isLight ? lightTheme : darkTheme}>\r\n                <Header\r\n                    isLight={isLight}\r\n                    open={drawerOpened}\r\n                    setOpen={setDrawerOpened}\r\n                >\r\n                    <Switch>\r\n                        <Route path=\"/folders/\" render={() => <Folders />} />\r\n                        <Route exact path=\"/\" render={() => <Folders />} />\r\n                        <Route\r\n                            exact\r\n                            path=\"/react-todolist\"\r\n                            render={() => <Folders />}\r\n                        />\r\n                    </Switch>\r\n                </Header>\r\n            </ThemeProvider>\r\n            <div\r\n                className={drawerOpened ? \"overlay\" : \"\"}\r\n                onClick={() => {\r\n                    setDrawerOpened(false);\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MainApp = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}