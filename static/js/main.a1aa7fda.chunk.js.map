{"version":3,"sources":["components/Header/Header.tsx","assets/DraggableItem.tsx","assets/DroppableItem.tsx","components/Folders/ToDoList/AddTaskDialog.tsx","components/Folders/ToDoList/ToDo.tsx","assets/AlertDialog.tsx","components/Folders/ToDoList/ToDoList.tsx","components/Folders/Folder/Folder.tsx","components/Folders/Folder/SetFolder.tsx","components/Folders/AddFolderDialog.tsx","components/Folders/Folders.tsx","redux/actions/todo.ts","redux/constants/todo.ts","redux/reducers/todo.ts","redux/reduxStore.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["isMobile","Android","navigator","userAgent","match","BlackBerry","iOS","Opera","Windows","any","useStyles","makeStyles","theme","root","display","height","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","background","palette","type","menuButton","marginRight","spacing","hide","flexShrink","drawerPaper","boxShadow","shadows","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","link","textDecoration","color","listText","text","primary","Header","isLight","setIsLight","open","setOpen","children","classes","useTheme","useState","window","innerWidth","drawerWidth","setDrawerWidth","useEffect","handleResize","addEventListener","removeEventListener","handleDrawer","className","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","onClick","edge","Typography","variant","noWrap","Drawer","style","width","anchor","paper","direction","List","to","ListItem","button","ListItemIcon","ListItemText","marginLeft","DraggableItem","id","draggableId","index","provided","ref","innerRef","draggableProps","dragHandleProps","DroppableItem","horizontal","droppableId","droppableProps","placeholder","AddTaskDialog","handleAddButton","addGoal","hasError","setError","currentText","setCurrentText","handleAddNewGoal","useCallback","onKeyDown","e","key","preventDefault","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","error","helperText","autoFocus","margin","label","fullWidth","onChange","target","value","DialogActions","Button","ToDo","goal","toggleCheckbox","toggleChecked","item","checked","checkedList","notCheckedList","notChecked","Box","Divider","divider","ListItemSecondaryAction","Checkbox","check","AlertDialog","question","handleSuccess","handleFail","aria-describedby","paddingLeft","paddingRight","list","flexDirection","borderBottom","action","selected","buttons","right","bottom","marginBottom","deleteButton","light","icon","default","ToDoList","currentFolderId","deleteDone","swapTasks","folders","alertOpen","setAlertOpen","currentFolder","parseInt","onDragEnd","result","destination","source","TransitionGroup","goals","map","CSSTransition","classNames","timeout","Tooltip","title","placement","Fab","size","card","borderWidth","btnContainer","flex","shadow","Folder","headline","description","deleteFolder","setShadow","onMouseEnter","onMouseLeave","Card","CardActionArea","CardContent","gutterBottom","component","CardActions","small","SetFolder","curHeadline","setCurHeadline","curDescription","setCurDescription","errorDesc","errorHead","setErrorDesc","setErrorHead","clearError","AddFolderDialog","flexWrap","paddingTop","drop","drag","container","addButton","mapDispatchToProps","setCurrentFolderById","addFolder","from","swapFolders","WrappedFolders","compose","connect","state","todo","withRouter","params","undefined","length","Grid","folder","xs","md","lg","initialState","reducer","payload","foldersCopy","currentFolderCopy","newGoal","newGoals","filter","el","i","currentGoals","newFolder","splice","removed","newFolders","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","lightTheme","createMuiTheme","darkTheme","main","dark","secondary","disabledBackground","App","drawerOpened","setDrawerOpened","ThemeProvider","path","render","exact","MainApp","Boolean","location","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1aa7fda.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, useTheme, Theme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\r\nimport SunIcon from \"@material-ui/icons/Brightness5Outlined\";\r\nimport MoonIcon from \"@material-ui/icons/Brightness2Outlined\";\r\n\r\nconst isMobile = {\r\n  Android: () => navigator.userAgent.match(/Android/i),\r\n  BlackBerry: () => navigator.userAgent.match(/BlackBerry/i),\r\n  iOS: () => navigator.userAgent.match(/iPhone|iPad|iPod/i),\r\n  Opera: () => navigator.userAgent.match(/Opera Mini/i),\r\n  Windows: () =>\r\n    navigator.userAgent.match(/IEMobile/i) ||\r\n    navigator.userAgent.match(/WPDesktop/i),\r\n  any: () =>\r\n    isMobile.Android() ||\r\n    isMobile.BlackBerry() ||\r\n    isMobile.iOS() ||\r\n    isMobile.Opera() ||\r\n    isMobile.Windows(),\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    background: theme.palette.type === \"dark\" ? \"#3700B3\" : \"#3F51B5\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: \"black\",\r\n  },\r\n  listText: {\r\n    color: theme.palette.text.primary,\r\n  },\r\n}));\r\n\r\ntype PropsType = {\r\n  isLight: boolean;\r\n  setIsLight: (isLight: boolean) => void;\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  children: React.ReactChild;\r\n};\r\n\r\nconst Header = ({\r\n  isLight,\r\n  setIsLight,\r\n  open,\r\n  setOpen,\r\n  children,\r\n}: PropsType) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [drawerWidth, setDrawerWidth] = useState(\r\n    window.innerWidth * (isMobile.any() ? 0.5 : 0.2)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (drawerWidth !== window.innerWidth * (isMobile.any() ? 0.5 : 0.2))\r\n        setDrawerWidth(window.innerWidth * (isMobile.any() ? 0.5 : 0.2));\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  });\r\n\r\n  const handleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setIsLight(!isLight);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawer}\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            To do list\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        style={{\r\n          width: drawerWidth + \"px\",\r\n        }}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div\r\n          className={classes.drawerHeader}\r\n          style={{\r\n            width: drawerWidth + \"px\",\r\n          }}\r\n        >\r\n          <IconButton onClick={handleDrawer}>\r\n            {theme.direction === \"ltr\" ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <List>\r\n          <NavLink\r\n            to=\"/folders\"\r\n            className={classes.link}\r\n            onClick={() => setOpen(false)}\r\n          >\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <FolderOpenIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Folders\" className={classes.listText} />\r\n            </ListItem>\r\n          </NavLink>\r\n          <ListItem button onClick={toggleTheme}>\r\n            <ListItemIcon>{isLight ? <SunIcon /> : <MoonIcon />}</ListItemIcon>\r\n            <ListItemText\r\n              primary={isLight ? \"Light theme\" : \"Dark theme\"}\r\n              className={classes.listText}\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n\r\n      <main\r\n        className={classes.content}\r\n        style={{\r\n          marginLeft: -drawerWidth + \"px\",\r\n        }}\r\n      >\r\n        <div>\r\n          <div className={classes.drawerHeader} />\r\n          {children}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Draggable, DraggableProvided } from \"react-beautiful-dnd\";\r\n\r\ntype DraggableItemPropsType = {\r\n  id: number;\r\n  className?: string;\r\n  children: React.ReactChild;\r\n};\r\n\r\nconst DraggableItem = ({ id, className, children }: DraggableItemPropsType) => {\r\n  return (\r\n    <Draggable draggableId={\"item-\" + id} index={id}>\r\n      {(provided: DraggableProvided) => (\r\n        <div\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          className={className}\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default DraggableItem;\r\n","import React from \"react\";\r\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\r\n\r\ntype DroppableItemPropsType = {\r\n  className?: string;\r\n  horizontal?: boolean;\r\n  droppableId: string;\r\n  children: React.ReactChild;\r\n};\r\n\r\nconst DroppableItem = ({\r\n  className,\r\n  horizontal,\r\n  droppableId,\r\n  children,\r\n}: DroppableItemPropsType) => {\r\n  return (\r\n    <Droppable\r\n      droppableId={droppableId}\r\n      direction={horizontal ? \"horizontal\" : \"vertical\"}\r\n    >\r\n      {(provided: DroppableProvided) => (\r\n        <div\r\n          {...provided.droppableProps}\r\n          ref={provided.innerRef}\r\n          className={className}\r\n        >\r\n          {children}\r\n          {provided.placeholder}\r\n        </div>\r\n      )}\r\n    </Droppable>\r\n  );\r\n};\r\n\r\nexport default DroppableItem;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype PropsType = {\r\n  handleAddButton: () => void;\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  addGoal: (text: string) => void;\r\n};\r\n\r\nconst AddTaskDialog = ({\r\n  handleAddButton,\r\n  open,\r\n  setOpen,\r\n  addGoal\r\n}: PropsType) => {\r\n  const [hasError, setError] = useState(\"\");\r\n  const [currentText, setCurrentText] = useState(\"\");\r\n\r\n  const handleAddNewGoal = useCallback(() => {\r\n    if (currentText !== \"\") {\r\n      addGoal(currentText);\r\n      setCurrentText(\"\");\r\n      setOpen(false);\r\n    } else {\r\n      setError(\"Field can not be empty\");\r\n    }\r\n  }, [addGoal, setCurrentText, setOpen, currentText]);\r\n\r\n  const onKeyDown = useCallback(\r\n    (e: React.KeyboardEvent) => {\r\n      if (e.key === \"Enter\") {\r\n        e.preventDefault();\r\n        handleAddNewGoal();\r\n      } else if (e.key === \"Escape\") {\r\n        setOpen(false);\r\n        e.preventDefault();\r\n      }\r\n    },\r\n    [setOpen, handleAddNewGoal]\r\n  );\r\n  const textChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setError(\"\");\r\n    setCurrentText(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleAddButton}\r\n      aria-labelledby=\"form-dialog-title\"\r\n      onKeyDown={onKeyDown}\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">Add a new goal</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          To accomplish your goals you need to know how to set them. You can't\r\n          simply expect it to happen. Goal setting is a process that starts with\r\n          careful consideration of what you want to achieve, and ends with a lot\r\n          of hard work to actually do it.\r\n        </DialogContentText>\r\n        <TextField\r\n          error={!!hasError}\r\n          helperText={hasError}\r\n          autoFocus\r\n          margin=\"dense\"\r\n          id=\"name\"\r\n          label=\"Add goal\"\r\n          fullWidth\r\n          type=\"text\"\r\n          onChange={textChanged}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleAddButton} color=\"secondary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleAddNewGoal} color=\"primary\">\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddTaskDialog;\r\n","import React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { GoalType } from \"./../../../types/index_d\";\r\nimport { ToDoListStyleType } from \"./ToDoList\";\r\n\r\ntype PropsType = {\r\n  goal: GoalType;\r\n  classes: ToDoListStyleType;\r\n  toggleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  toggleChecked: (taskId: number) => void;\r\n};\r\n\r\nconst ToDo = ({ goal, classes, toggleCheckbox, toggleChecked }: PropsType) => {\r\n  return (\r\n    <ListItem\r\n      button\r\n      onClick={() => {\r\n        toggleChecked(goal.id);\r\n      }}\r\n      className={\r\n        classes.item +\r\n        \" , \" +\r\n        (goal.checked ? classes.checkedList : classes.notCheckedList)\r\n      }\r\n    >\r\n      <span className={goal.checked ? classes.checked : classes.notChecked}>\r\n        {goal.text}\r\n      </span>\r\n      <Box boxShadow={5}>\r\n        <Divider className={classes.divider} />\r\n      </Box>\r\n      <ListItemSecondaryAction>\r\n        <Checkbox\r\n          edge=\"end\"\r\n          className={classes.check}\r\n          checked={goal.checked}\r\n          onChange={toggleCheckbox}\r\n          value={goal.id}\r\n        />\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\ntype AlertDialogPropsType = {\r\n  question: string;\r\n  text: string;\r\n  open: boolean;\r\n  handleSuccess: () => void;\r\n  handleFail: () => void;\r\n};\r\n\r\nconst AlertDialog = ({\r\n  question,\r\n  text,\r\n  open,\r\n  handleSuccess,\r\n  handleFail\r\n}: AlertDialogPropsType) => {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{question}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {text}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleFail} color=\"primary\">\r\n          No\r\n        </Button>\r\n        <Button onClick={handleSuccess} color=\"primary\" autoFocus>\r\n          Yes\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AlertDialog;\r\n","import React, { useState } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Tooltip, Theme, StyleRules } from \"@material-ui/core\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport DraggableItem from \"../../../assets/DraggableItem\";\r\nimport DroppableItem from \"../../../assets/DroppableItem\";\r\nimport AddTaskDialog from \"./AddTaskDialog\";\r\nimport ToDo from \"./ToDo\";\r\nimport AlertDialog from \"../../../assets/AlertDialog\";\r\nimport { FolderType } from \"./../../../types/index_d\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst useStyles = makeStyles(\r\n  (theme: Theme): StyleRules<string> => ({\r\n    root: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      position: \"relative\",\r\n      paddingLeft: \"10px\",\r\n      paddingRight: \"10px\",\r\n    },\r\n    list: {\r\n      width: \"100%\",\r\n      position: \"relative\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n    },\r\n    item: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      position: \"relative\",\r\n      borderBottom: \"1px solid \" + theme.palette.action.selected,\r\n      boxShadow: theme.shadows[3],\r\n    },\r\n    buttons: {\r\n      display: \"flex\",\r\n      position: \"fixed\",\r\n      right: 0,\r\n      bottom: 0,\r\n      marginRight: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    button: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n    checked: {\r\n      textDecoration: \"line-through\",\r\n    },\r\n    deleteButton: {\r\n      marginRight: \"1%\",\r\n    },\r\n    divider: {\r\n      light: theme.palette.type,\r\n    },\r\n    icon: {\r\n      color: theme.palette.background.default,\r\n    },\r\n  })\r\n);\r\n\r\nexport type ToDoListStyleType = ReturnType<typeof useStyles>;\r\n\r\ntype PropsType = {\r\n  id: number;\r\n  currentFolderId: number;\r\n  toggleChecked: (id: number) => void;\r\n  addGoal: (newGoalText: string) => void;\r\n  deleteDone: () => void;\r\n  swapTasks: (from: number, to: number) => void;\r\n  folders: Array<FolderType>;\r\n};\r\n\r\nconst ToDoList = ({\r\n  id,\r\n  currentFolderId,\r\n  toggleChecked,\r\n  addGoal,\r\n  deleteDone,\r\n  swapTasks,\r\n  folders,\r\n}: PropsType) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [alertOpen, setAlertOpen] = useState(false);\r\n\r\n  let currentFolder = folders[id];\r\n\r\n  const handleDeleteButton = () => {\r\n    setAlertOpen(true);\r\n  };\r\n\r\n  const handleAddButton = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const toggleCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value) toggleChecked(parseInt(e.target.value));\r\n  };\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    swapTasks(result.source.index, result.destination.index);\r\n  };\r\n\r\n  const handleFail = () => {\r\n    setAlertOpen(false);\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    setAlertOpen(false);\r\n    deleteDone();\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <DroppableItem droppableId=\"DroppableToDo\">\r\n          <List className={classes.list}>\r\n            <TransitionGroup className={\"list-group \" + classes.list}>\r\n              {currentFolder.goals.map((goal) => {\r\n                return (\r\n                  <CSSTransition classNames=\"note\" timeout={500} key={goal.id}>\r\n                    <DraggableItem id={goal.id}>\r\n                      <ToDo\r\n                        goal={goal}\r\n                        classes={classes}\r\n                        toggleCheckbox={toggleCheckbox}\r\n                        toggleChecked={toggleChecked}\r\n                      />\r\n                    </DraggableItem>\r\n                  </CSSTransition>\r\n                );\r\n              })}\r\n            </TransitionGroup>\r\n          </List>\r\n        </DroppableItem>\r\n      </DragDropContext>\r\n      <div>\r\n        <div className={classes.buttons}>\r\n          <div className={classes.deleteButton}>\r\n            <Tooltip\r\n              title=\"Delete done tasks\"\r\n              aria-label=\"delete\"\r\n              placement=\"bottom\"\r\n            >\r\n              <Fab\r\n                color=\"secondary\"\r\n                aria-label=\"add\"\r\n                size=\"medium\"\r\n                onClick={handleDeleteButton}\r\n                className={classes.button}\r\n              >\r\n                <DeleteIcon className={classes.icon} />\r\n              </Fab>\r\n            </Tooltip>\r\n          </div>\r\n          <Tooltip title=\"Add\" aria-label=\"add\" placement=\"bottom\">\r\n            <Fab\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n              size=\"medium\"\r\n              onClick={handleAddButton}\r\n              className={classes.button}\r\n            >\r\n              <AddIcon className={classes.icon} />\r\n            </Fab>\r\n          </Tooltip>\r\n        </div>\r\n        <AddTaskDialog\r\n          handleAddButton={handleAddButton}\r\n          open={open}\r\n          setOpen={setOpen}\r\n          addGoal={addGoal}\r\n        />\r\n        <AlertDialog\r\n          question=\"Delete all done tasks?\"\r\n          text=\"Do you really want to delete all the done tasks? You will be unable to restore them.\"\r\n          open={alertOpen}\r\n          handleSuccess={handleSuccess}\r\n          handleFail={handleFail}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles, StyleRules, Theme } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AlertDialog from \"../../../assets/AlertDialog\";\r\nimport { CardActionArea } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(\r\n  (theme: Theme): StyleRules<string> => ({\r\n    root: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    },\r\n    card: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      borderWidth: \"2px\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      background: theme.palette.background.default,\r\n    },\r\n    btnContainer: {\r\n      display: \"flex\",\r\n      justifyContent: \"flex-end\",\r\n      flex: 1,\r\n      height: \"100%\",\r\n    },\r\n    link: {\r\n      textDecoration: \"none\",\r\n      color: theme.palette.text.primary,\r\n      height: \"100%\",\r\n    },\r\n    shadow: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    },\r\n  })\r\n);\r\n\r\ntype PropsType = {\r\n  id: number;\r\n  headline: string;\r\n  description: string;\r\n  deleteFolder: (folderId: number) => void;\r\n};\r\n\r\nconst Folder = ({ id, headline, description, deleteFolder }: PropsType) => {\r\n  const classes = useStyles();\r\n  const [shadow, setShadow] = useState(2);\r\n  const [alertOpen, setAlertOpen] = useState(false);\r\n  const deleteThisFolder = () => {\r\n    deleteFolder(id);\r\n  };\r\n\r\n  const shadowOn = () => {\r\n    setShadow(12);\r\n  };\r\n\r\n  const shadowOff = () => {\r\n    setShadow(2);\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    setAlertOpen(false);\r\n    deleteThisFolder();\r\n  };\r\n\r\n  const handleFail = () => {\r\n    setAlertOpen(false);\r\n  };\r\n\r\n  const handleDeleteButton = () => {\r\n    setAlertOpen(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box\r\n        boxShadow={shadow}\r\n        onMouseEnter={shadowOn}\r\n        onMouseLeave={shadowOff}\r\n        className={classes.shadow}\r\n      >\r\n        <Card variant=\"outlined\" className={classes.card}>\r\n          <NavLink to={`/folders/${id}`} className={classes.link}>\r\n            <CardActionArea>\r\n              <CardContent>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {headline}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                  {description}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n          </NavLink>\r\n          <CardActions className={classes.btnContainer}>\r\n            <Button\r\n              size=\"large\"\r\n              onClick={handleDeleteButton}\r\n              color=\"secondary\"\r\n              className={classes.small}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Box>\r\n      <AlertDialog\r\n        question=\"Delete the folder?\"\r\n        text=\"Do you really want to delete the folder? You will be unable to restore it.\"\r\n        open={alertOpen}\r\n        handleSuccess={handleSuccess}\r\n        handleFail={handleFail}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Folder;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { DialogContent } from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n  curHeadline: string;\r\n  setCurHeadline: (a: string) => void;\r\n  curDescription: string;\r\n  setCurDescription: (a: string) => void;\r\n  errorDesc: string;\r\n  errorHead: string;\r\n  setErrorDesc: (a: string) => void;\r\n  setErrorHead: (a: string) => void;\r\n};\r\n\r\nconst SetFolder = ({\r\n  curHeadline,\r\n  setCurHeadline,\r\n  curDescription,\r\n  setCurDescription,\r\n  errorDesc,\r\n  errorHead,\r\n  setErrorDesc,\r\n  setErrorHead\r\n}: PropsType) => {\r\n  const clearError = () => {\r\n    setErrorDesc(\"\");\r\n    setErrorHead(\"\");\r\n  };\r\n  return (\r\n    <DialogContent>\r\n      <TextField\r\n        autoFocus\r\n        error={!!errorHead}\r\n        helperText={errorHead}\r\n        margin=\"dense\"\r\n        id=\"headline\"\r\n        label=\"Headline\"\r\n        fullWidth\r\n        value={curHeadline}\r\n        onChange={e => {\r\n          setCurHeadline(e.target.value);\r\n          clearError();\r\n        }}\r\n      ></TextField>\r\n      <TextField\r\n        error={!!errorDesc}\r\n        helperText={errorDesc}\r\n        margin=\"dense\"\r\n        id=\"description\"\r\n        label=\"Description\"\r\n        fullWidth\r\n        value={curDescription}\r\n        onChange={e => {\r\n          setCurDescription(e.target.value);\r\n          clearError();\r\n        }}\r\n      ></TextField>\r\n    </DialogContent>\r\n  );\r\n};\r\n\r\nexport default SetFolder;\r\n","import React, { useCallback } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SetFolder from \"./Folder/SetFolder\";\r\nimport { FoldersStyleType } from \"./Folders\";\r\n\r\ntype PropsType = {\r\n  classes: FoldersStyleType;\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  curHeadline: string;\r\n  setCurHeadline: (newHeadline: string) => void;\r\n  curDescription: string;\r\n  setCurDescription: (newDescription: string) => void;\r\n  errorHead: string;\r\n  errorDesc: string;\r\n  setErrorHead: (newErrorHead: string) => void;\r\n  setErrorDesc: (newErrorDesc: string) => void;\r\n  handleAddButton: () => void;\r\n};\r\n\r\nconst AddFolderDialog = ({\r\n  classes,\r\n  open,\r\n  setOpen,\r\n  curHeadline,\r\n  setCurHeadline,\r\n  curDescription,\r\n  setCurDescription,\r\n  errorHead,\r\n  errorDesc,\r\n  setErrorHead,\r\n  setErrorDesc,\r\n  handleAddButton\r\n}: PropsType) => {\r\n  const onKeyDown = useCallback(\r\n    (e: React.KeyboardEvent) => {\r\n      if (e.key === \"Enter\") {\r\n        e.preventDefault();\r\n        handleAddButton();\r\n      } else if (e.key === \"Escape\") {\r\n        setOpen(false);\r\n        e.preventDefault();\r\n      }\r\n    },\r\n    [setOpen, handleAddButton]\r\n  );\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      aria-labelledby=\"form-dialog-folders\"\r\n      onKeyDown={onKeyDown}\r\n    >\r\n      <DialogTitle id=\"form-dialog-folders\">Add new folder</DialogTitle>\r\n      <SetFolder\r\n        curHeadline={curHeadline}\r\n        setCurHeadline={setCurHeadline}\r\n        curDescription={curDescription}\r\n        setCurDescription={setCurDescription}\r\n        errorHead={errorHead}\r\n        errorDesc={errorDesc}\r\n        setErrorHead={setErrorHead}\r\n        setErrorDesc={setErrorDesc}\r\n      />\r\n      <DialogActions>\r\n        <Button onClick={() => setOpen(false)} color=\"secondary\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleAddButton} color=\"primary\">\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddFolderDialog;\r\n","import React, { useState } from \"react\";\r\nimport ToDoList from \"./ToDoList/ToDoList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Folder from \"./Folder/Folder\";\r\nimport { Grid, Theme, StyleRules } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport {\r\n  setCurrentFolderById,\r\n  toggleChecked,\r\n  addGoal,\r\n  deleteFolder,\r\n  deleteDone,\r\n  addFolder,\r\n  swapTasks,\r\n  swapFolders,\r\n} from \"../../redux/actions/todo\";\r\nimport AddFolderDialog from \"./AddFolderDialog\";\r\nimport { FolderType } from \"./../../types/index_d\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport { RouteComponentProps, Redirect } from \"react-router\";\r\n\r\nlet useStyles = makeStyles(\r\n  (theme: Theme): StyleRules<string> => ({\r\n    root: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      flexGrow: 1,\r\n      width: \"100%\",\r\n      paddingTop: theme.spacing(2),\r\n      paddingLeft: theme.spacing(3),\r\n    },\r\n    drop: {\r\n      width: \"100%\",\r\n    },\r\n    item: {},\r\n    drag: {\r\n      width: \"100%\",\r\n    },\r\n    container: {\r\n      position: \"relative\",\r\n      width: \"100%\",\r\n    },\r\n    addButton: {\r\n      position: \"fixed\",\r\n      right: 0,\r\n      bottom: 0,\r\n      marginRight: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    icon: {\r\n      color: theme.palette.background.default,\r\n    },\r\n  })\r\n);\r\n\r\nexport type FoldersStyleType = ReturnType<typeof useStyles>;\r\n\r\ninterface MatchParams {\r\n  currentFolder?: string;\r\n}\r\n\r\ninterface OwnProps extends RouteComponentProps<MatchParams> {}\r\n\r\ntype PropsType = OwnProps & MapDispatchPropsType & MapStatePropsType;\r\n\r\nconst Folders = ({\r\n  folders,\r\n  match,\r\n  setCurrentFolderById,\r\n  currentFolderId,\r\n  toggleChecked,\r\n  addGoal,\r\n  deleteFolder,\r\n  deleteDone,\r\n  addFolder,\r\n  swapTasks,\r\n  swapFolders,\r\n}: PropsType) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [curHeadline, setCurHeadline] = useState(\"\");\r\n  const [curDescription, setCurDescription] = useState(\"\");\r\n  const [errorHead, setErrorHead] = useState(\"\");\r\n  const [errorDesc, setErrorDesc] = useState(\"\");\r\n\r\n  const handleAddButton = () => {\r\n    if (curHeadline !== \"\") {\r\n      if (curDescription !== \"\") {\r\n        addFolder(curHeadline, curDescription);\r\n        setCurDescription(\"\");\r\n        setCurHeadline(\"\");\r\n        setOpen(false);\r\n        setErrorDesc(\"\");\r\n        setErrorHead(\"\");\r\n      } else {\r\n        setErrorDesc(\"Field can not be empty\");\r\n      }\r\n    } else {\r\n      setErrorHead(\"Field can not be empty\");\r\n    }\r\n  };\r\n\r\n  let currentFolder: number | null = null;\r\n\r\n  if (\r\n    match.params.currentFolder !== \"\" &&\r\n    match.params.currentFolder !== undefined\r\n  )\r\n    currentFolder = parseInt(match.params.currentFolder);\r\n\r\n  if (currentFolder !== null) {\r\n    if (currentFolder >= folders.length || currentFolder < 0)\r\n      return <Redirect to=\"folders\" />;\r\n    setCurrentFolderById(currentFolder);\r\n    return (\r\n      <div>\r\n        <ToDoList\r\n          id={currentFolder}\r\n          currentFolderId={currentFolderId}\r\n          toggleChecked={toggleChecked}\r\n          addGoal={addGoal}\r\n          deleteDone={deleteDone}\r\n          swapTasks={swapTasks}\r\n          folders={folders}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.container} spacing={3}>\r\n        {folders.map((folder: FolderType) => {\r\n          return (\r\n            <Grid\r\n              key={folder.id}\r\n              item\r\n              className={classes.item}\r\n              xs={6}\r\n              md={4}\r\n              lg={3}\r\n            >\r\n              <Folder\r\n                id={folder.id}\r\n                description={folder.description}\r\n                headline={folder.headline}\r\n                deleteFolder={deleteFolder}\r\n              />\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n      <div className={classes.addButton}>\r\n        <Tooltip title=\"Add\" aria-label=\"add\" placement=\"bottom\">\r\n          <Fab\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            size=\"medium\"\r\n            onClick={() => setOpen(true)}\r\n          >\r\n            <AddIcon className={classes.icon} />\r\n          </Fab>\r\n        </Tooltip>\r\n      </div>\r\n      <AddFolderDialog\r\n        classes={classes}\r\n        open={open}\r\n        setOpen={setOpen}\r\n        curHeadline={curHeadline}\r\n        setCurHeadline={setCurHeadline}\r\n        curDescription={curDescription}\r\n        setCurDescription={setCurDescription}\r\n        errorHead={errorHead}\r\n        errorDesc={errorDesc}\r\n        setErrorHead={setErrorHead}\r\n        setErrorDesc={setErrorDesc}\r\n        handleAddButton={handleAddButton}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\ntype MapStatePropsType = {\r\n  folders: Array<FolderType>;\r\n  currentFolderId: number;\r\n};\r\n\r\ntype MapDispatchPropsType = {\r\n  setCurrentFolderById: (id: number) => void;\r\n  toggleChecked: (id: number) => void;\r\n  addGoal: (text: string) => void;\r\n  deleteFolder: (id: number) => void;\r\n  deleteDone: () => void;\r\n  addFolder: (headline: string, description: string) => void;\r\n  swapTasks: (from: number, to: number) => void;\r\n  swapFolders: (from: number, to: number) => void;\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  folders: state.todo.folders,\r\n  currentFolderId: state.todo.currentFolderId,\r\n});\r\n\r\nconst mapDispatchToProps: MapDispatchPropsType = {\r\n  setCurrentFolderById,\r\n  toggleChecked,\r\n  addGoal,\r\n  deleteFolder,\r\n  deleteDone,\r\n  addFolder,\r\n  swapTasks,\r\n  swapFolders,\r\n};\r\n\r\nconst WrappedFolders = compose(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnProps, AppStateType>(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  ),\r\n  withRouter\r\n)(Folders);\r\n\r\nexport default WrappedFolders as React.ComponentType;\r\n","import { action } from \"typesafe-actions\";\r\nimport * as constants from \"./../constants/todo\";\r\n\r\nexport const setCurrentFolderById = (id: number) =>\r\n  action(constants.SET_CURRENT_FOLDER, { id });\r\n\r\nexport const toggleChecked = (id: number) =>\r\n  action(constants.TOGGLE_CHECKED, { id });\r\n\r\nexport const addGoal = (text: string) => action(constants.ADD_GOAL, { text });\r\n\r\nexport const deleteFolder = (id: number) =>\r\n  action(constants.DELETE_FOLDER, { id });\r\n\r\nexport const deleteDone = () => action(constants.DELETE_DONE);\r\n\r\nexport const addFolder = (headline: string, description: string) =>\r\n  action(constants.ADD_FOLDER, { headline, description });\r\n\r\nexport const swapTasks = (from: number, to: number) =>\r\n  action(constants.SWAP_TASKS, { from, to });\r\n\r\nexport const swapFolders = (from: number, to: number) =>\r\n  action(constants.SWAP_FOLDERS, { from, to });\r\n","export const SET_CURRENT_FOLDER = \"todo/SET_CURRENT_FOLDER\";\r\nexport const TOGGLE_CHECKED = \"todo/TOGGLE_CHECKED\";\r\nexport const ADD_GOAL = \"todo/ADD_GOAL\";\r\nexport const DELETE_FOLDER = \"todo/DELETE_FOLDER\";\r\nexport const DELETE_DONE = \"todo/DELETE_DONE\";\r\nexport const ADD_FOLDER = \"todo/ADD_FOLDER\";\r\nexport const SWAP_TASKS = \"todo/SWAP_TASKS\";\r\nexport const SWAP_FOLDERS = \"todo/SWAP_FOLDERS\";\r\nexport const UNDO_DELETE_TASKS = \"todo/UNDO_DELETE_TASKS\";\r\n","import { ActionType } from \"typesafe-actions\";\r\nimport * as actions from \"../actions/todo\";\r\nimport * as constants from \"./../constants/todo\";\r\n\r\nconst initialState = {\r\n  folders: [\r\n    {\r\n      id: 0,\r\n      headline: \"Anime SUPERgoals\",\r\n      description: \"About Anime SUPERgoals\",\r\n      goals: [\r\n        {\r\n          id: 0,\r\n          text: \"Watch 1 anime\",\r\n          checked: true,\r\n        },\r\n        {\r\n          id: 1,\r\n          text: \"Watch 2 anime\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: 2,\r\n          text: \"Watch 3 anime\",\r\n          checked: false,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 1,\r\n      headline: \"SUPERgoals\",\r\n      description: \"About this SUPERgoals\",\r\n      goals: [\r\n        {\r\n          id: 0,\r\n          text: \"Watch 4 anime\",\r\n          checked: true,\r\n        },\r\n        {\r\n          id: 1,\r\n          text: \"Watch 5 anime\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: 2,\r\n          text: \"Watch 7 anime\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: 3,\r\n          text: \"Watch 9 anime\",\r\n          checked: false,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      headline: \"Anime SUPERgoals2457\",\r\n      description: \"About this SUPERgoals\",\r\n      goals: [\r\n        {\r\n          id: 0,\r\n          text: \"Watch 4 anime\",\r\n          checked: true,\r\n        },\r\n        {\r\n          id: 1,\r\n          text: \"Watch 5 anime\",\r\n          checked: false,\r\n        },\r\n        {\r\n          id: 2,\r\n          text: \"Watch 7 anime\",\r\n          checked: false,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  currentFolderId: 0,\r\n};\r\n\r\ntype StateType = typeof initialState;\r\nexport type TodosAction = ActionType<typeof actions>;\r\n\r\nconst reducer = (state = initialState, action: TodosAction): StateType => {\r\n  switch (action.type) {\r\n    case constants.SET_CURRENT_FOLDER: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        currentFolderId: id,\r\n      };\r\n    }\r\n    case constants.TOGGLE_CHECKED: {\r\n      const { id } = action.payload;\r\n      let foldersCopy = [...state.folders];\r\n      let currentFolderCopy = { ...state.folders[state.currentFolderId] };\r\n      currentFolderCopy.goals[id].checked = !currentFolderCopy.goals[id]\r\n        .checked;\r\n      foldersCopy[state.currentFolderId] = { ...currentFolderCopy };\r\n\r\n      return {\r\n        ...state,\r\n        folders: [...foldersCopy],\r\n      };\r\n    }\r\n    case constants.ADD_GOAL: {\r\n      const { text } = action.payload;\r\n      let foldersCopy = [...state.folders];\r\n      const newGoal = {\r\n        id: state.folders[state.currentFolderId].goals.length,\r\n        text: text,\r\n        checked: false,\r\n      };\r\n      const newGoals = [...state.folders[state.currentFolderId].goals, newGoal];\r\n      foldersCopy[state.currentFolderId].goals = [...newGoals];\r\n      return {\r\n        ...state,\r\n        folders: [...foldersCopy],\r\n      };\r\n    }\r\n    case constants.DELETE_FOLDER: {\r\n      const { id } = action.payload;\r\n      let foldersCopy = [...state.folders];\r\n      foldersCopy = foldersCopy.filter((el) => {\r\n        return id !== el.id;\r\n      });\r\n      for (let i = id; i < foldersCopy.length; ++i) {\r\n        --foldersCopy[i].id;\r\n      }\r\n      return {\r\n        ...state,\r\n        folders: [...foldersCopy],\r\n      };\r\n    }\r\n    case constants.DELETE_DONE: {\r\n      let foldersCopy = [...state.folders];\r\n      let currentGoals = [...state.folders[state.currentFolderId].goals];\r\n      currentGoals = currentGoals.filter((el) => {\r\n        return !el.checked;\r\n      });\r\n      for (let i = 0; i < currentGoals.length; ++i) {\r\n        currentGoals[i].id = i;\r\n      }\r\n      foldersCopy[state.currentFolderId].goals = [...currentGoals];\r\n      return {\r\n        ...state,\r\n        folders: [...foldersCopy],\r\n      };\r\n    }\r\n    case constants.ADD_FOLDER: {\r\n      const { description, headline } = action.payload;\r\n\r\n      const newFolder = {\r\n        id: state.folders.length,\r\n        headline: headline,\r\n        description: description,\r\n        goals: [],\r\n      };\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders, newFolder],\r\n      };\r\n    }\r\n    case constants.SWAP_TASKS: {\r\n      const { from, to } = action.payload;\r\n      let foldersCopy = [...state.folders];\r\n      let newGoals = [...state.folders[state.currentFolderId].goals];\r\n      const [removed] = newGoals.splice(from, 1);\r\n      newGoals.splice(to, 0, removed);\r\n\r\n      for (let i = 0; i < newGoals.length; ++i) {\r\n        newGoals[i].id = i;\r\n      }\r\n\r\n      foldersCopy[state.currentFolderId].goals = [...newGoals];\r\n      return {\r\n        ...state,\r\n        folders: [...foldersCopy],\r\n      };\r\n    }\r\n    case constants.SWAP_FOLDERS: {\r\n      const { from, to } = action.payload;\r\n      let newFolders = [...state.folders];\r\n\r\n      const [removed] = newFolders.splice(from, 1);\r\n      newFolders.splice(to, 0, removed);\r\n\r\n      for (let i = 0; i < newFolders.length; ++i) {\r\n        newFolders[i].id = i;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        folders: [...newFolders],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport todo from \"./reducers/todo\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todo: todo\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // required for Redux extension\r\n\r\nlet store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Folders from \"./components/Folders/Folders\";\r\nimport store from \"./redux/reduxStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n//palette.primary.main\r\nconst lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"light\",\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n      main: \"#E87509\",\r\n      dark: \"#C04D09\",\r\n    },\r\n    secondary: {\r\n      main: \"#FF69B4\",\r\n    },\r\n    action: {\r\n      disabledBackground: \"#121212\",\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const [isLight, setIsLight] = useState(true);\r\n  const [drawerOpened, setDrawerOpened] = useState(false);\r\n  return (\r\n    <div className=\"app-wrapper\">\r\n      <ThemeProvider theme={isLight ? lightTheme : darkTheme}>\r\n        <Header\r\n          isLight={isLight}\r\n          setIsLight={setIsLight}\r\n          open={drawerOpened}\r\n          setOpen={setDrawerOpened}\r\n        >\r\n          <div>\r\n            <Route path=\"/folders/:currentFolder?\" render={() => <Folders />} />\r\n            <Route path=\"/\" exact render={() => <Folders />} />\r\n            <Route path=\"/react-todolist\" exact render={() => <Folders />} />\r\n          </div>\r\n        </Header>\r\n      </ThemeProvider>\r\n      <div\r\n        className={drawerOpened ? \"overlay\" : \"\"}\r\n        onClick={() => {\r\n          setDrawerOpened(false);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}