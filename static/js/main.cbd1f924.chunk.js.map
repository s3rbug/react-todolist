{"version":3,"sources":["types/index_d.ts","utils/validators.ts","components/Header/Header.tsx","assets/DraggableItem.tsx","assets/DroppableItem.tsx","assets/FormRenders.tsx","components/Folders/ToDoList/SetGoalForm.tsx","components/Folders/ToDoList/AddTaskDialog.tsx","components/Folders/ToDoList/ToDo.tsx","assets/AlertDialog.tsx","components/Folders/ToDoList/ToDoList.tsx","components/Folders/Folder/Folder.tsx","redux/actions/ui.ts","redux/constants/ui.ts","components/Folders/Folder/SetFolderForm.tsx","components/Folders/AddFolderDialog.tsx","redux/reducers/todo.ts","redux/constants/todo.ts","redux/reducers/ui.ts","redux/reduxStore.ts","components/Folders/Folders.tsx","redux/actions/todo.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["DrawerTypeEnum","length","isMobile","Android","navigator","userAgent","match","BlackBerry","iOS","Opera","Windows","any","useStyles","makeStyles","theme","root","display","height","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","background","palette","type","menuButton","marginRight","spacing","hide","flexShrink","drawerPaper","boxShadow","shadows","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","link","textDecoration","color","listText","text","primary","withRouter","isLight","setIsLight","open","setOpen","setDrawerMode","drawerMode","history","children","classes","useTheme","useState","window","innerWidth","drawerWidth","setDrawerWidth","useEffect","handleResize","addEventListener","removeEventListener","handleDrawer","className","CssBaseline","AppBar","position","Toolbar","Back","IconButton","aria-label","onClick","goBack","Menu","edge","Typography","variant","noWrap","Drawer","style","width","anchor","paper","direction","List","to","ListItem","button","ListItemIcon","ListItemText","marginLeft","DraggableItem","id","draggableId","index","provided","ref","innerRef","draggableProps","dragHandleProps","DroppableItem","horizontal","droppableId","droppableProps","placeholder","RenderTextField","label","input","autoFocus","fullWidth","margin","meta","touched","invalid","error","custom","TextField","helperText","required","value","maxLength50","SetFolderReduxForm","reduxForm","form","props","handleSubmit","onSubmit","DialogContent","DialogContentText","Field","name","component","validate","DialogActions","Button","AddTaskDialog","handleAddButton","addGoal","Dialog","onClose","aria-labelledby","DialogTitle","formData","goalText","ToDo","goal","toggleCheckbox","toggleEditing","toggleChecked","stopEditing","setGoal","item","checked","checkedList","notCheckedList","editing","onChange","e","target","notChecked","Box","Divider","divider","fontSize","ListItemSecondaryAction","Checkbox","check","AlertDialog","question","handleSuccess","handleFail","aria-describedby","paddingLeft","paddingRight","list","flexDirection","borderBottom","action","selected","cursor","buttons","right","bottom","marginBottom","deleteButton","light","icon","default","edit","ToDoList","currentFolderId","deleteDone","swapTasks","folders","alertOpen","setAlertOpen","currentFolder","parseInt","onDragEnd","result","destination","source","TransitionGroup","goals","map","CSSTransition","classNames","timeout","key","Tooltip","title","placement","Fab","size","card","borderWidth","btnContainer","flex","shadow","Folder","headline","description","deleteFolder","setShadow","onMouseEnter","onMouseLeave","Card","CardActionArea","CardContent","gutterBottom","CardActions","small","setDrawerModeAction","AddFolderDialog","addFolder","initialState","reducer","state","payload","reduceItem","folder","goalIndex","newGoal","filter","el","i","newFolder","from","slice","idx","goalIdx","drawerOpened","rootReducer","combineReducers","todo","ui","formReducer","useTypedSelector","useSelector","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","array","flexWrap","paddingTop","drop","drag","container","addButton","dispatch","useDispatch","useCallback","deleteFolderAction","swapTasksAction","toggleEditingAction","addGoalAction","setGoalAction","mode","addFolderAction","toggleCheckedAction","params","undefined","align","setCurrentFolderByIdAction","Grid","xs","md","lg","lightTheme","createMuiTheme","darkTheme","main","dark","secondary","disabledBackground","App","setIsLightAction","setDrawerOpened","setDrawerOpenedAction","ThemeProvider","path","render","exact","MainApp","Boolean","location","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbd1f924.chunk.js","sourcesContent":["export type GoalType = {\r\n  id: number;\r\n  text: string;\r\n  checked: boolean;\r\n  editing: boolean;\r\n};\r\n\r\nexport type FolderType = {\r\n  id: number;\r\n  headline: string;\r\n  description: string;\r\n  goals: Array<GoalType>;\r\n};\r\n\r\nexport type FolderFormDataType = {\r\n  headline: string;\r\n  description: string;\r\n};\r\n\r\nexport type TaskFormDataType = {\r\n  goalText: string;\r\n};\r\n\r\nexport enum DrawerTypeEnum {\r\n  Menu = 1,\r\n  Back,\r\n}\r\n","export const required = (value: string): string | undefined => {\r\n  if (value) return undefined;\r\n  return \"Field can not be empty\";\r\n};\r\n\r\nconst maxLength = (length: number) => (value: string) => {\r\n  if (length >= value.length) return undefined;\r\n  return \"Maximal count of symbols is \" + length;\r\n};\r\n\r\nexport const maxLength50 = maxLength(50);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles, useTheme, Theme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { NavLink, RouteComponentProps } from \"react-router-dom\";\r\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\r\nimport SunIcon from \"@material-ui/icons/Brightness5Outlined\";\r\nimport MoonIcon from \"@material-ui/icons/Brightness2Outlined\";\r\nimport { DrawerTypeEnum } from \"../../types/index_d\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst isMobile = {\r\n  Android: () => navigator.userAgent.match(/Android/i),\r\n  BlackBerry: () => navigator.userAgent.match(/BlackBerry/i),\r\n  iOS: () => navigator.userAgent.match(/iPhone|iPad|iPod/i),\r\n  Opera: () => navigator.userAgent.match(/Opera Mini/i),\r\n  Windows: () =>\r\n    navigator.userAgent.match(/IEMobile/i) ||\r\n    navigator.userAgent.match(/WPDesktop/i),\r\n  any: () =>\r\n    isMobile.Android() ||\r\n    isMobile.BlackBerry() ||\r\n    isMobile.iOS() ||\r\n    isMobile.Opera() ||\r\n    isMobile.Windows(),\r\n};\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    height: \"100vh\",\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    background: theme.palette.type === \"dark\" ? \"#3700B3\" : \"#3F51B5\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    boxShadow: theme.shadows[3],\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: \"black\",\r\n  },\r\n  listText: {\r\n    color: theme.palette.text.primary,\r\n  },\r\n}));\r\n\r\ntype OwnProps = {\r\n  isLight: boolean;\r\n  setIsLight: (isLight: boolean) => void;\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  children: React.ReactChild;\r\n  setDrawerMode: (type: DrawerTypeEnum) => void;\r\n  drawerMode: DrawerTypeEnum;\r\n};\r\n\r\ntype PropsType = OwnProps & RouteComponentProps;\r\n\r\nconst Header = ({\r\n  isLight,\r\n  setIsLight,\r\n  open,\r\n  setOpen,\r\n  setDrawerMode,\r\n  drawerMode,\r\n  history,\r\n  children,\r\n}: PropsType) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [drawerWidth, setDrawerWidth] = useState(\r\n    window.innerWidth * (isMobile.any() ? 0.5 : 0.2)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (drawerWidth !== window.innerWidth * (isMobile.any() ? 0.5 : 0.2))\r\n        setDrawerWidth(window.innerWidth * (isMobile.any() ? 0.5 : 0.2));\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, [drawerWidth]);\r\n\r\n  const handleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    setIsLight(!isLight);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          {drawerMode === DrawerTypeEnum.Back ? (\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open back\"\r\n              onClick={() => {\r\n                history.goBack();\r\n                setDrawerMode(DrawerTypeEnum.Menu);\r\n              }}\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n            >\r\n              <ArrowBackIcon />\r\n            </IconButton>\r\n          ) : (\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawer}\r\n              edge=\"start\"\r\n              className={classes.menuButton}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n          )}\r\n          <Typography variant=\"h6\" noWrap>\r\n            To do list\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        style={{\r\n          width: drawerWidth + \"px\",\r\n        }}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div\r\n          className={classes.drawerHeader}\r\n          style={{\r\n            width: drawerWidth + \"px\",\r\n          }}\r\n        >\r\n          <IconButton onClick={handleDrawer}>\r\n            {theme.direction === \"ltr\" ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <List>\r\n          <NavLink\r\n            to=\"/folders\"\r\n            className={classes.link}\r\n            onClick={() => setOpen(false)}\r\n          >\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <FolderOpenIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Folders\" className={classes.listText} />\r\n            </ListItem>\r\n          </NavLink>\r\n          <ListItem button onClick={toggleTheme}>\r\n            <ListItemIcon>{isLight ? <SunIcon /> : <MoonIcon />}</ListItemIcon>\r\n            <ListItemText\r\n              primary={isLight ? \"Light theme\" : \"Dark theme\"}\r\n              className={classes.listText}\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n\r\n      <main\r\n        className={classes.content}\r\n        style={{\r\n          marginLeft: -drawerWidth + \"px\",\r\n        }}\r\n      >\r\n        <div>\r\n          <div className={classes.drawerHeader} />\r\n          {children}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nimport { Draggable, DraggableProvided } from \"react-beautiful-dnd\";\r\n\r\ntype DraggableItemPropsType = {\r\n  id: number;\r\n  className?: string;\r\n  children: React.ReactChild;\r\n};\r\n\r\nconst DraggableItem = ({ id, className, children }: DraggableItemPropsType) => {\r\n  return (\r\n    <Draggable draggableId={\"item-\" + id} index={id}>\r\n      {(provided: DraggableProvided) => (\r\n        <div\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          className={className}\r\n        >\r\n          {children}\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default DraggableItem;\r\n","import React from \"react\";\r\nimport { Droppable, DroppableProvided } from \"react-beautiful-dnd\";\r\n\r\ntype DroppableItemPropsType = {\r\n  className?: string;\r\n  horizontal?: boolean;\r\n  droppableId: string;\r\n  children: React.ReactChild;\r\n};\r\n\r\nconst DroppableItem = ({\r\n  className,\r\n  horizontal,\r\n  droppableId,\r\n  children,\r\n}: DroppableItemPropsType) => {\r\n  return (\r\n    <Droppable\r\n      droppableId={droppableId}\r\n      direction={horizontal ? \"horizontal\" : \"vertical\"}\r\n    >\r\n      {(provided: DroppableProvided) => (\r\n        <div\r\n          {...provided.droppableProps}\r\n          ref={provided.innerRef}\r\n          className={className}\r\n        >\r\n          {children}\r\n          {provided.placeholder}\r\n        </div>\r\n      )}\r\n    </Droppable>\r\n  );\r\n};\r\n\r\nexport default DroppableItem;\r\n","import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nexport const RenderTextField = ({\r\n  label,\r\n  input,\r\n  autoFocus,\r\n  fullWidth,\r\n  margin,\r\n  meta: { touched, invalid, error },\r\n  ...custom\r\n}: any) => (\r\n  <TextField\r\n    margin={margin}\r\n    fullWidth={fullWidth}\r\n    autoFocus={autoFocus}\r\n    label={label}\r\n    placeholder={label}\r\n    error={touched && invalid}\r\n    helperText={touched && error}\r\n    {...input}\r\n    {...custom}\r\n  />\r\n);\r\n","import React from \"react\";\r\nimport { InjectedFormProps, Field, reduxForm } from \"redux-form\";\r\nimport { RenderTextField } from \"../../../assets/FormRenders\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { TaskFormDataType } from \"../../../types/index_d\";\r\nimport { required, maxLength50 } from \"../../../utils/validators\";\r\n\r\ntype PropsType = {\r\n  setOpen: (isOpen: boolean) => void;\r\n};\r\n\r\nconst SetGoalForm: React.FC<\r\n  InjectedFormProps<TaskFormDataType, PropsType> & PropsType\r\n> = (props) => {\r\n  const { handleSubmit, setOpen } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          To accomplish your goals you need to know how to set them. You can't\r\n          simply expect it to happen. Goal setting is a process that starts with\r\n          careful consideration of what you want to achieve, and ends with a lot\r\n          of hard work to actually do it.\r\n        </DialogContentText>\r\n        <Field\r\n          name=\"goalText\"\r\n          fullWidth\r\n          autoFocus\r\n          placeholder=\"Add goal\"\r\n          label=\"Add goal\"\r\n          margin=\"dense\"\r\n          type=\"text\"\r\n          component={RenderTextField}\r\n          validate={[required, maxLength50]}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Field\r\n          name=\"cancel\"\r\n          component={Button}\r\n          color=\"secondary\"\r\n          onClick={() => setOpen(false)}\r\n        >\r\n          Cancel\r\n        </Field>\r\n        <Field component={Button} name=\"addGoal\" color=\"primary\" type=\"submit\">\r\n          Add\r\n        </Field>\r\n      </DialogActions>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SetFolderReduxForm = reduxForm<TaskFormDataType, PropsType>({\r\n  form: \"set-goal\",\r\n})(SetGoalForm);\r\nexport default SetFolderReduxForm;\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport SetGoalForm from \"./SetGoalForm\";\r\nimport { TaskFormDataType } from \"../../../types/index_d\";\r\n\r\ntype PropsType = {\r\n  handleAddButton: () => void;\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  addGoal: (text: string) => void;\r\n};\r\n\r\nfunction AddTaskDialog({ handleAddButton, open, setOpen, addGoal }: PropsType) {\r\n  const onSubmit = (formData: TaskFormDataType) => {\r\n    addGoal(formData.goalText);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleAddButton}\r\n      aria-labelledby=\"form-dialog-title\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-title\">Add a new goal</DialogTitle>\r\n      <SetGoalForm setOpen={setOpen} onSubmit={onSubmit} />\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default AddTaskDialog;\r\n","import React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { GoalType } from \"./../../../types/index_d\";\r\nimport { ToDoListStyleType } from \"./ToDoList\";\r\nimport EditRoundedIcon from \"@material-ui/icons/EditRounded\";\r\nimport { TextField, IconButton } from \"@material-ui/core\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\n\r\ntype PropsType = {\r\n  goal: GoalType;\r\n  classes: ToDoListStyleType;\r\n  id: number;\r\n  toggleCheckbox: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  toggleChecked: (taskId: number) => void;\r\n  toggleEditing: (id: number) => void;\r\n  stopEditing: () => void;\r\n  setGoal: (id: number, goal: string) => void;\r\n};\r\n\r\nconst ToDo = ({\r\n  goal,\r\n  classes,\r\n  id,\r\n  toggleCheckbox,\r\n  toggleChecked,\r\n  toggleEditing,\r\n  stopEditing,\r\n  setGoal,\r\n}: PropsType) => {\r\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value.length <= 50) setGoal(id, e.target.value);\r\n  };\r\n  return (\r\n    <ListItem\r\n      className={\r\n        classes.item +\r\n        \" , \" +\r\n        (goal.checked ? classes.checkedList : classes.notCheckedList)\r\n      }\r\n    >\r\n      {goal.editing ? (\r\n        <TextField\r\n          autoFocus\r\n          value={goal.text}\r\n          onChange={changeHandler}\r\n          className={goal.checked ? classes.checked : classes.notChecked}\r\n        />\r\n      ) : (\r\n        <span className={goal.checked ? classes.checked : classes.notChecked}>\r\n          {goal.text}\r\n        </span>\r\n      )}\r\n      <Box boxShadow={5}>\r\n        <Divider className={classes.divider} />\r\n      </Box>\r\n      {goal.editing ? (\r\n        <IconButton\r\n          onClick={() => {\r\n            toggleEditing(id);\r\n          }}\r\n        >\r\n          <DoneIcon color=\"primary\" />\r\n        </IconButton>\r\n      ) : (\r\n        <IconButton\r\n          onClick={() => {\r\n            if (!goal.editing) {\r\n              stopEditing();\r\n              toggleEditing(id);\r\n            }\r\n          }}\r\n        >\r\n          <EditRoundedIcon fontSize=\"small\" />\r\n        </IconButton>\r\n      )}\r\n      <ListItemSecondaryAction>\r\n        <Checkbox\r\n          edge=\"end\"\r\n          className={classes.check}\r\n          checked={goal.checked}\r\n          onChange={toggleCheckbox}\r\n          value={goal.id}\r\n        />\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\ntype AlertDialogPropsType = {\r\n  question: string;\r\n  text: string;\r\n  open: boolean;\r\n  handleSuccess: () => void;\r\n  handleFail: () => void;\r\n};\r\n\r\nconst AlertDialog = ({\r\n  question,\r\n  text,\r\n  open,\r\n  handleSuccess,\r\n  handleFail\r\n}: AlertDialogPropsType) => {\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      aria-labelledby=\"alert-dialog-title\"\r\n      aria-describedby=\"alert-dialog-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-title\">{question}</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-description\">\r\n          {text}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleFail} color=\"primary\">\r\n          No\r\n        </Button>\r\n        <Button onClick={handleSuccess} color=\"primary\" autoFocus>\r\n          Yes\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AlertDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Tooltip, Theme, StyleRules } from \"@material-ui/core\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport DraggableItem from \"../../../assets/DraggableItem\";\r\nimport DroppableItem from \"../../../assets/DroppableItem\";\r\nimport AddTaskDialog from \"./AddTaskDialog\";\r\nimport ToDo from \"./ToDo\";\r\nimport AlertDialog from \"../../../assets/AlertDialog\";\r\nimport { FolderType, DrawerTypeEnum } from \"./../../../types/index_d\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nconst useStyles = makeStyles(\r\n  (theme: Theme): StyleRules<string> => ({\r\n    root: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      position: \"relative\",\r\n      paddingLeft: \"10px\",\r\n      paddingRight: \"10px\",\r\n    },\r\n    list: {\r\n      width: \"100%\",\r\n      position: \"relative\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n    },\r\n    item: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      position: \"relative\",\r\n      borderBottom: \"1px solid \" + theme.palette.action.selected,\r\n      boxShadow: theme.shadows[3],\r\n      cursor: \"default\",\r\n    },\r\n    buttons: {\r\n      display: \"flex\",\r\n      position: \"fixed\",\r\n      right: 0,\r\n      bottom: 0,\r\n      marginRight: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    button: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n    checked: {\r\n      textDecoration: \"line-through\",\r\n    },\r\n    deleteButton: {\r\n      marginRight: \"1%\",\r\n    },\r\n    divider: {\r\n      light: theme.palette.type,\r\n    },\r\n    icon: {\r\n      color: theme.palette.background.default,\r\n    },\r\n    edit: {\r\n      marginLeft: theme.spacing(1),\r\n    },\r\n  })\r\n);\r\n\r\nexport type ToDoListStyleType = ReturnType<typeof useStyles>;\r\n\r\ntype PropsType = {\r\n  id: number;\r\n  currentFolderId: number;\r\n  toggleChecked: (id: number) => void;\r\n  addGoal: (newGoalText: string) => void;\r\n  deleteDone: () => void;\r\n  swapTasks: (from: number, to: number) => void;\r\n  stopEditing: () => void;\r\n  toggleEditing: (id: number) => void;\r\n  setGoal: (id: number, goal: string) => void;\r\n  folders: Array<FolderType>;\r\n  setDrawerMode: (type: DrawerTypeEnum) => void;\r\n  drawerMode: DrawerTypeEnum;\r\n};\r\n\r\nconst ToDoList = ({\r\n  id,\r\n  currentFolderId,\r\n  toggleChecked,\r\n  addGoal,\r\n  deleteDone,\r\n  swapTasks,\r\n  stopEditing,\r\n  toggleEditing,\r\n  setGoal,\r\n  folders,\r\n  setDrawerMode,\r\n  drawerMode,\r\n}: PropsType) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [alertOpen, setAlertOpen] = useState(false);\r\n\r\n  let currentFolder = folders[id];\r\n\r\n  const handleDeleteButton = () => {\r\n    setAlertOpen(true);\r\n  };\r\n\r\n  const handleAddButton = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const toggleCheckbox = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.value) toggleChecked(parseInt(e.target.value));\r\n  };\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    if (!result.destination) {\r\n      return;\r\n    }\r\n    swapTasks(result.source.index, result.destination.index);\r\n  };\r\n\r\n  const handleFail = () => {\r\n    setAlertOpen(false);\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    setAlertOpen(false);\r\n    deleteDone();\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setDrawerMode(DrawerTypeEnum.Back);\r\n    return () => {\r\n      setDrawerMode(DrawerTypeEnum.Menu);\r\n    };\r\n  }, [setDrawerMode]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <DroppableItem droppableId=\"DroppableToDo\">\r\n          <List className={classes.list}>\r\n            <TransitionGroup className={\"list-group \" + classes.list}>\r\n              {currentFolder.goals.map((goal) => {\r\n                return (\r\n                  <CSSTransition classNames=\"note\" timeout={500} key={goal.id}>\r\n                    <DraggableItem id={goal.id}>\r\n                      <ToDo\r\n                        goal={goal}\r\n                        classes={classes}\r\n                        toggleCheckbox={toggleCheckbox}\r\n                        toggleChecked={toggleChecked}\r\n                        toggleEditing={toggleEditing}\r\n                        stopEditing={stopEditing}\r\n                        setGoal={setGoal}\r\n                        id={goal.id}\r\n                      />\r\n                    </DraggableItem>\r\n                  </CSSTransition>\r\n                );\r\n              })}\r\n            </TransitionGroup>\r\n          </List>\r\n        </DroppableItem>\r\n      </DragDropContext>\r\n      <div>\r\n        <div className={classes.buttons}>\r\n          <div className={classes.deleteButton}>\r\n            <Tooltip\r\n              title=\"Delete done tasks\"\r\n              aria-label=\"delete\"\r\n              placement=\"bottom\"\r\n            >\r\n              <Fab\r\n                color=\"secondary\"\r\n                aria-label=\"add\"\r\n                size=\"medium\"\r\n                onClick={handleDeleteButton}\r\n                className={classes.button}\r\n              >\r\n                <DeleteIcon className={classes.icon} />\r\n              </Fab>\r\n            </Tooltip>\r\n          </div>\r\n          <Tooltip title=\"Add\" aria-label=\"add\" placement=\"bottom\">\r\n            <Fab\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n              size=\"medium\"\r\n              onClick={handleAddButton}\r\n              className={classes.button}\r\n            >\r\n              <AddIcon className={classes.icon} />\r\n            </Fab>\r\n          </Tooltip>\r\n        </div>\r\n        <AddTaskDialog\r\n          handleAddButton={handleAddButton}\r\n          open={open}\r\n          setOpen={setOpen}\r\n          addGoal={addGoal}\r\n        />\r\n        <AlertDialog\r\n          question=\"Delete all done tasks?\"\r\n          text=\"Do you really want to delete all the done tasks? You will be unable to restore them.\"\r\n          open={alertOpen}\r\n          handleSuccess={handleSuccess}\r\n          handleFail={handleFail}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from \"react\";\r\nimport { makeStyles, StyleRules, Theme } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AlertDialog from \"../../../assets/AlertDialog\";\r\nimport { CardActionArea } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(\r\n  (theme: Theme): StyleRules<string> => ({\r\n    root: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    },\r\n    card: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      borderWidth: \"2px\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      background: theme.palette.background.default,\r\n    },\r\n    btnContainer: {\r\n      display: \"flex\",\r\n      justifyContent: \"flex-end\",\r\n      flex: 1,\r\n      height: \"100%\",\r\n    },\r\n    link: {\r\n      textDecoration: \"none\",\r\n      color: theme.palette.text.primary,\r\n      height: \"100%\",\r\n    },\r\n    shadow: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    },\r\n  })\r\n);\r\n\r\ntype PropsType = {\r\n  id: number;\r\n  headline: string;\r\n  description: string;\r\n  deleteFolder: (folderId: number) => void;\r\n};\r\n\r\nconst Folder = ({ id, headline, description, deleteFolder }: PropsType) => {\r\n  const classes = useStyles();\r\n  const [shadow, setShadow] = useState(2);\r\n  const [alertOpen, setAlertOpen] = useState(false);\r\n  const deleteThisFolder = () => {\r\n    deleteFolder(id);\r\n  };\r\n  const shadowOn = () => {\r\n    setShadow(12);\r\n  };\r\n\r\n  const shadowOff = () => {\r\n    setShadow(2);\r\n  };\r\n\r\n  const handleSuccess = () => {\r\n    setAlertOpen(false);\r\n    deleteThisFolder();\r\n  };\r\n\r\n  const handleFail = () => {\r\n    setAlertOpen(false);\r\n  };\r\n\r\n  const handleDeleteButton = () => {\r\n    setAlertOpen(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Box\r\n        boxShadow={shadow}\r\n        onMouseEnter={shadowOn}\r\n        onMouseLeave={shadowOff}\r\n        className={classes.shadow}\r\n      >\r\n        <Card variant=\"outlined\" className={classes.card}>\r\n          <NavLink to={`/folders/${id}`} className={classes.link}>\r\n            <CardActionArea>\r\n              <CardContent>\r\n                <Typography\r\n                  gutterBottom\r\n                  variant=\"h5\"\r\n                  component=\"h2\"\r\n                  color=\"textPrimary\"\r\n                >\r\n                  {headline}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                  {description}\r\n                </Typography>\r\n              </CardContent>\r\n            </CardActionArea>\r\n          </NavLink>\r\n          <CardActions className={classes.btnContainer}>\r\n            <Button\r\n              size=\"large\"\r\n              color=\"secondary\"\r\n              onClick={handleDeleteButton}\r\n              className={classes.small}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </CardActions>\r\n        </Card>\r\n      </Box>\r\n      <AlertDialog\r\n        question=\"Delete the folder?\"\r\n        text=\"Do you really want to delete the folder? You will be unable to restore it.\"\r\n        open={alertOpen}\r\n        handleSuccess={handleSuccess}\r\n        handleFail={handleFail}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Folder;\r\n","import { action } from \"typesafe-actions\";\r\nimport * as constants from \"../constants/ui\";\r\nimport { DrawerTypeEnum } from \"../../types/index_d\";\r\n\r\nexport const setDrawerModeAction = (type: DrawerTypeEnum) =>\r\n  action(constants.SET_DRAWER_MODE, { type });\r\n\r\nexport const setIsLightAction = (isLight: boolean) =>\r\n  action(constants.SET_IS_LIGHT, { isLight });\r\n\r\nexport const setDrawerOpenedAction = (open: boolean) =>\r\n  action(constants.SET_DRAWER_OPENED, { open });\r\n","export const SET_DRAWER_MODE = \"ui/SET_DRAWER_MODE\";\r\nexport const SET_IS_LIGHT = \"ui/SET_IS_LIGHT\";\r\nexport const SET_DRAWER_OPENED = \"ui/SET_DRAWER_OPENED\";\r\n","import React from \"react\";\r\nimport { DialogActions, Button } from \"@material-ui/core\";\r\nimport { InjectedFormProps, reduxForm, Field } from \"redux-form\";\r\nimport { FolderFormDataType } from \"./../../../types/index_d\";\r\nimport { RenderTextField } from \"../../../assets/FormRenders\";\r\nimport { required, maxLength50 } from \"../../../utils/validators\";\r\n\r\ntype PropsType = {\r\n  setOpen: (open: boolean) => void;\r\n};\r\n\r\nconst SetFolderForm: React.FC<\r\n  InjectedFormProps<FolderFormDataType, PropsType> & PropsType\r\n> = (props) => {\r\n  const { handleSubmit, setOpen } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        autoFocus\r\n        fullWidth\r\n        name=\"headline\"\r\n        component={RenderTextField}\r\n        label=\"Headline\"\r\n        margin=\"dense\"\r\n        placeholder=\"Headline\"\r\n        validate={[required, maxLength50]}\r\n      />\r\n      <Field\r\n        fullWidth\r\n        name=\"description\"\r\n        component={RenderTextField}\r\n        label=\"Description\"\r\n        margin=\"dense\"\r\n        placeholder=\"Description\"\r\n        validate={[required, maxLength50]}\r\n      ></Field>\r\n      <DialogActions>\r\n        <Field\r\n          component={Button}\r\n          name=\"cancel\"\r\n          color=\"secondary\"\r\n          type=\"button\"\r\n          onClick={() => setOpen(false)}\r\n        >\r\n          Cancel\r\n        </Field>\r\n        <Field component={Button} name=\"add\" color=\"primary\" type=\"submit\">\r\n          Add\r\n        </Field>\r\n      </DialogActions>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SetFolderReduxForm = reduxForm<FolderFormDataType, PropsType>({\r\n  form: \"set-folder\",\r\n})(SetFolderForm);\r\nexport default SetFolderReduxForm;\r\n","import React from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport SetFolderForm from \"./Folder/SetFolderForm\";\r\nimport { FoldersStyleType } from \"./Folders\";\r\nimport { DialogContent } from \"@material-ui/core\";\r\nimport { FolderFormDataType } from \"./../../types/index_d\";\r\n\r\ntype PropsType = {\r\n  classes: FoldersStyleType;\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  addFolder: (headline: string, description: string) => void;\r\n};\r\n\r\nconst AddFolderDialog = ({ classes, open, setOpen, addFolder }: PropsType) => {\r\n  const onSubmit = (formData: FolderFormDataType) => {\r\n    addFolder(formData.headline, formData.description);\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      aria-labelledby=\"form-dialog-folders\"\r\n    >\r\n      <DialogTitle id=\"form-dialog-folders\">Add new folder</DialogTitle>\r\n      <DialogContent>\r\n        <SetFolderForm onSubmit={onSubmit} setOpen={setOpen} />\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddFolderDialog;\r\n","import { ActionType } from \"typesafe-actions\";\r\nimport * as actions from \"../actions/todo\";\r\nimport * as constants from \"./../constants/todo\";\r\nimport { reduceItem } from \"../reduxStore\";\r\n\r\nconst initialState = {\r\n  folders: [\r\n    {\r\n      id: 0,\r\n      headline: \"Anime SUPERgoals\",\r\n      description: \"About Anime SUPERgoals\",\r\n      goals: [\r\n        {\r\n          id: 0,\r\n          text: \"Watch 1 anime\",\r\n          checked: true,\r\n          editing: false,\r\n        },\r\n        {\r\n          id: 1,\r\n          text: \"Watch 2 anime\",\r\n          checked: false,\r\n          editing: false,\r\n        },\r\n        {\r\n          id: 2,\r\n          text: \"Watch 3 anime\",\r\n          checked: false,\r\n          editing: false,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 1,\r\n      headline: \"SUPERgoals\",\r\n      description: \"About this SUPERgoals\",\r\n      goals: [\r\n        {\r\n          id: 0,\r\n          text: \"Watch 4 anime\",\r\n          checked: true,\r\n          editing: false,\r\n        },\r\n        {\r\n          id: 1,\r\n          text: \"Watch 5 anime\",\r\n          checked: false,\r\n          editing: false,\r\n        },\r\n        {\r\n          id: 2,\r\n          text: \"Watch 7 anime\",\r\n          checked: false,\r\n          editing: false,\r\n        },\r\n        {\r\n          id: 3,\r\n          text: \"Watch 9 anime\",\r\n          checked: false,\r\n          editing: false,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      id: 2,\r\n      headline: \"Anime SUPERgoals2457\",\r\n      description: \"About this SUPERgoals\",\r\n      goals: [\r\n        {\r\n          id: 0,\r\n          text: \"Watch 4 anime\",\r\n          checked: true,\r\n          editing: false,\r\n        },\r\n        {\r\n          id: 1,\r\n          text: \"Watch 5 anime\",\r\n          checked: false,\r\n          editing: false,\r\n        },\r\n        {\r\n          id: 2,\r\n          text: \"Watch 7 anime\",\r\n          checked: false,\r\n          editing: false,\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  currentFolderId: 0,\r\n};\r\n\r\ntype StateType = typeof initialState;\r\nexport type TodosAction = ActionType<typeof actions>;\r\n\r\nconst reducer = (state = initialState, action: TodosAction): StateType => {\r\n  switch (action.type) {\r\n    case constants.SET_CURRENT_FOLDER: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        currentFolderId: id,\r\n      };\r\n    }\r\n    case constants.TOGGLE_CHECKED: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        folders: reduceItem(state.folders, state.currentFolderId, (folder) => {\r\n          return {\r\n            ...folder,\r\n            goals: folder.goals.map((goal, goalIndex) => {\r\n              if (goalIndex === id) {\r\n                return {\r\n                  ...goal,\r\n                  checked: !goal.checked,\r\n                };\r\n              } else {\r\n                return goal;\r\n              }\r\n            }),\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    case constants.ADD_GOAL: {\r\n      const { text } = action.payload;\r\n      const newGoal = {\r\n        id: state.folders[state.currentFolderId].goals.length,\r\n        text: text,\r\n        checked: false,\r\n        editing: false,\r\n      };\r\n      return {\r\n        ...state,\r\n        folders: reduceItem(state.folders, state.currentFolderId, (folder) => {\r\n          return {\r\n            ...folder,\r\n            goals: [...folder.goals, newGoal],\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    case constants.DELETE_FOLDER: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        folders: state.folders\r\n          .filter((el) => id !== el.id)\r\n          .map((folder, i) => ({ ...folder, id: i })),\r\n      };\r\n    }\r\n    case constants.DELETE_DONE: {\r\n      return {\r\n        ...state,\r\n        folders: reduceItem(state.folders, state.currentFolderId, (folder) => {\r\n          return {\r\n            ...folder,\r\n            goals: folder.goals\r\n              .filter((goal) => !goal.checked)\r\n              .map((goal, i) => ({\r\n                ...goal,\r\n                id: i,\r\n              })),\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    case constants.ADD_FOLDER: {\r\n      const { description, headline } = action.payload;\r\n\r\n      const newFolder = {\r\n        id: state.folders.length,\r\n        headline: headline,\r\n        description: description,\r\n        goals: [],\r\n      };\r\n      return {\r\n        ...state,\r\n        folders: [...state.folders, newFolder],\r\n      };\r\n    }\r\n    case constants.SWAP_TASKS: {\r\n      let { from, to } = action.payload;\r\n      if (from === to) return state;\r\n      return {\r\n        ...state,\r\n        folders: reduceItem(state.folders, state.currentFolderId, (folder) => ({\r\n          ...folder,\r\n          goals: (to > from\r\n            ? [\r\n                ...folder.goals.slice(0, from),\r\n                ...folder.goals.slice(from + 1, to + 1),\r\n                folder.goals[from],\r\n                ...folder.goals.slice(to + 1, folder.goals.length),\r\n              ]\r\n            : [\r\n                ...folder.goals.slice(0, to),\r\n                folder.goals[from],\r\n                ...folder.goals.slice(to, from),\r\n                ...folder.goals.slice(from + 1, folder.goals.length),\r\n              ]\r\n          ).map((goal, i) => ({\r\n            ...goal,\r\n            id: i,\r\n          })),\r\n        })),\r\n      };\r\n    }\r\n    case constants.SWAP_FOLDERS: {\r\n      let { from, to } = action.payload;\r\n\r\n      return {\r\n        ...state,\r\n        folders: (to > from\r\n          ? [\r\n              ...state.folders.slice(0, from),\r\n              ...state.folders.slice(from + 1, to + 1),\r\n              state.folders[from],\r\n              ...state.folders.slice(to + 1, state.folders.length),\r\n            ]\r\n          : [\r\n              ...state.folders.slice(0, to),\r\n              state.folders[from],\r\n              ...state.folders.slice(to, from),\r\n              ...state.folders.slice(from + 1, state.folders.length),\r\n            ]\r\n        ).map((folder, i) => ({ ...folder, id: i })),\r\n      };\r\n    }\r\n    case constants.STOP_EDITING: {\r\n      return {\r\n        ...state,\r\n        folders: reduceItem(state.folders, state.currentFolderId, (folder) => ({\r\n          ...folder,\r\n          goals: folder.goals.map((goal) => ({ ...goal, editing: false })),\r\n        })),\r\n      };\r\n    }\r\n    case constants.START_EDITING: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        folders: reduceItem(state.folders, state.currentFolderId, (folder) => ({\r\n          ...folder,\r\n          goals: folder.goals.map((goal, idx) => {\r\n            if (idx !== id) return goal;\r\n            return { ...goal, editing: !goal.editing };\r\n          }),\r\n        })),\r\n      };\r\n    }\r\n    case constants.SET_GOAL: {\r\n      const { id, newGoal } = action.payload;\r\n      return {\r\n        ...state,\r\n        folders: reduceItem(state.folders, state.currentFolderId, (folder) => {\r\n          return {\r\n            ...folder,\r\n            goals: folder.goals.map((goal, goalIdx) => {\r\n              if (goalIdx !== id) return goal;\r\n              return {\r\n                ...goal,\r\n                text: newGoal,\r\n              };\r\n            }),\r\n          };\r\n        }),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","export const SET_CURRENT_FOLDER = \"todo/SET_CURRENT_FOLDER\";\r\nexport const TOGGLE_CHECKED = \"todo/TOGGLE_CHECKED\";\r\nexport const ADD_GOAL = \"todo/ADD_GOAL\";\r\nexport const DELETE_FOLDER = \"todo/DELETE_FOLDER\";\r\nexport const DELETE_DONE = \"todo/DELETE_DONE\";\r\nexport const ADD_FOLDER = \"todo/ADD_FOLDER\";\r\nexport const SWAP_TASKS = \"todo/SWAP_TASKS\";\r\nexport const SWAP_FOLDERS = \"todo/SWAP_FOLDERS\";\r\nexport const UNDO_DELETE_TASKS = \"todo/UNDO_DELETE_TASKS\";\r\nexport const STOP_EDITING = \"todo/STOP_EDITING\";\r\nexport const START_EDITING = \"todo/START_EDITING\";\r\nexport const SET_GOAL = \"todo/SET_GOAL\";\r\n","import { DrawerTypeEnum } from \"./../../types/index_d\";\r\nimport { ActionType } from \"typesafe-actions\";\r\nimport * as actions from \"../actions/ui\";\r\nimport * as constants from \"./../constants/ui\";\r\n\r\nconst initialState = {\r\n  drawerMode: DrawerTypeEnum.Menu,\r\n  isLight: true,\r\n  drawerOpened: false,\r\n};\r\n\r\nexport type UiAction = ActionType<typeof actions>;\r\ntype StateType = typeof initialState;\r\n\r\nconst reducer = (state = initialState, action: UiAction): StateType => {\r\n  switch (action.type) {\r\n    case constants.SET_DRAWER_MODE: {\r\n      const { type } = action.payload;\r\n      return {\r\n        ...state,\r\n        drawerMode: type,\r\n      };\r\n    }\r\n    case constants.SET_IS_LIGHT: {\r\n      const { isLight } = action.payload;\r\n      return {\r\n        ...state,\r\n        isLight,\r\n      };\r\n    }\r\n    case constants.SET_DRAWER_OPENED: {\r\n      const { open } = action.payload;\r\n      return {\r\n        ...state,\r\n        drawerOpened: open,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport todo from \"./reducers/todo\";\r\nimport ui from \"./reducers/ui\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todo: todo,\r\n  ui: ui,\r\n  form: formReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppStateType> = useSelector;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // required for Redux extension\r\n\r\nlet store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport const reduceItem = <T>(\r\n  array: ReadonlyArray<T>,\r\n  index: number,\r\n  reducer: (value: T) => T\r\n): T[] => [\r\n  ...array.slice(0, index),\r\n  reducer(array[index]),\r\n  ...array.slice(index + 1),\r\n];\r\n\r\nexport default store;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport ToDoList from \"./ToDoList/ToDoList\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Folder from \"./Folder/Folder\";\r\nimport { Grid, Theme, StyleRules, Typography } from \"@material-ui/core\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport {\r\n  setCurrentFolderByIdAction,\r\n  toggleCheckedAction,\r\n  addGoalAction,\r\n  deleteFolderAction,\r\n  deleteDoneAction,\r\n  addFolderAction,\r\n  swapTasksAction,\r\n  toggleEditingAction,\r\n  stopEditingAction,\r\n  setGoalAction,\r\n} from \"../../redux/actions/todo\";\r\nimport { setDrawerModeAction } from \"../../redux/actions/ui\";\r\nimport AddFolderDialog from \"./AddFolderDialog\";\r\nimport { FolderType, DrawerTypeEnum } from \"./../../types/index_d\";\r\nimport { useTypedSelector } from \"../../redux/reduxStore\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\nlet useStyles = makeStyles(\r\n  (theme: Theme): StyleRules<string> => ({\r\n    root: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      flexGrow: 1,\r\n      width: \"100%\",\r\n      paddingTop: theme.spacing(2),\r\n      paddingLeft: theme.spacing(3),\r\n    },\r\n    drop: {\r\n      width: \"100%\",\r\n    },\r\n    item: {},\r\n    drag: {\r\n      width: \"100%\",\r\n    },\r\n    container: {\r\n      position: \"relative\",\r\n      width: \"100%\",\r\n    },\r\n    addButton: {\r\n      position: \"fixed\",\r\n      right: 0,\r\n      bottom: 0,\r\n      marginRight: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    icon: {\r\n      color: theme.palette.background.default,\r\n    },\r\n  })\r\n);\r\n\r\nexport type FoldersStyleType = ReturnType<typeof useStyles>;\r\n\r\ninterface MatchParams {\r\n  currentFolder?: string;\r\n}\r\n\r\ninterface OwnProps extends RouteComponentProps<MatchParams> {}\r\n\r\nconst Folders = ({ match }: OwnProps) => {\r\n  const classes = useStyles();\r\n\r\n  const folders = useTypedSelector((state) => state.todo.folders);\r\n  const currentFolderId = useTypedSelector(\r\n    (state) => state.todo.currentFolderId\r\n  );\r\n  const drawerMode = useTypedSelector((state) => state.ui.drawerMode);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const setCurrentFolderById = (id: number) =>\r\n    dispatch(setCurrentFolderByIdAction(id));\r\n  const deleteFolder = useCallback(\r\n    (id: number) => dispatch(deleteFolderAction(id)),\r\n    [dispatch]\r\n  );\r\n  const deleteDone = useCallback(() => dispatch(deleteDoneAction()), [\r\n    dispatch,\r\n  ]);\r\n  const swapTasks = useCallback(\r\n    (from: number, to: number) => dispatch(swapTasksAction(from, to)),\r\n    [dispatch]\r\n  );\r\n  const toggleEditing = useCallback(\r\n    (id: number) => dispatch(toggleEditingAction(id)),\r\n    [dispatch]\r\n  );\r\n  const stopEditing = useCallback(() => dispatch(stopEditingAction()), [\r\n    dispatch,\r\n  ]);\r\n  const addGoal = useCallback((text: string) => dispatch(addGoalAction(text)), [\r\n    dispatch,\r\n  ]);\r\n  const setGoal = useCallback(\r\n    (id: number, newGoal: string) => dispatch(setGoalAction(id, newGoal)),\r\n    [dispatch]\r\n  );\r\n  const setDrawerMode = useCallback(\r\n    (mode: DrawerTypeEnum) => dispatch(setDrawerModeAction(mode)),\r\n    [dispatch]\r\n  );\r\n  const addFolder = useCallback(\r\n    (headline: string, description: string) =>\r\n      dispatch(addFolderAction(headline, description)),\r\n    [dispatch]\r\n  );\r\n  const toggleChecked = useCallback(\r\n    (id: number) => dispatch(toggleCheckedAction(id)),\r\n    [dispatch]\r\n  );\r\n\r\n  let currentFolder: number | null = null;\r\n\r\n  if (\r\n    match.params.currentFolder !== \"\" &&\r\n    match.params.currentFolder !== undefined\r\n  )\r\n    currentFolder = parseInt(match.params.currentFolder);\r\n\r\n  if (currentFolder !== null) {\r\n    if (currentFolder >= folders.length || currentFolder < 0)\r\n      return (\r\n        <Typography variant=\"h2\" align=\"center\" color=\"textPrimary\">\r\n          Incorrect folder id!\r\n        </Typography>\r\n      );\r\n    setCurrentFolderById(currentFolder);\r\n    return (\r\n      <div>\r\n        <ToDoList\r\n          id={currentFolder}\r\n          currentFolderId={currentFolderId}\r\n          toggleChecked={toggleChecked}\r\n          addGoal={addGoal}\r\n          deleteDone={deleteDone}\r\n          swapTasks={swapTasks}\r\n          toggleEditing={toggleEditing}\r\n          stopEditing={stopEditing}\r\n          setGoal={setGoal}\r\n          folders={folders}\r\n          setDrawerMode={setDrawerMode}\r\n          drawerMode={drawerMode}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.container} spacing={3}>\r\n        {folders.map((folder: FolderType) => {\r\n          return (\r\n            <Grid\r\n              key={folder.id}\r\n              item\r\n              className={classes.item}\r\n              xs={6}\r\n              md={4}\r\n              lg={3}\r\n            >\r\n              <Folder\r\n                id={folder.id}\r\n                description={folder.description}\r\n                headline={folder.headline}\r\n                deleteFolder={deleteFolder}\r\n              />\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n      <div className={classes.addButton}>\r\n        <Tooltip title=\"Add\" aria-label=\"add\" placement=\"bottom\">\r\n          <Fab\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n            size=\"medium\"\r\n            onClick={() => setOpen(true)}\r\n          >\r\n            <AddIcon className={classes.icon} />\r\n          </Fab>\r\n        </Tooltip>\r\n      </div>\r\n      <AddFolderDialog\r\n        classes={classes}\r\n        open={open}\r\n        setOpen={setOpen}\r\n        addFolder={addFolder}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Folders);\r\n","import { action } from \"typesafe-actions\";\r\nimport * as constants from \"./../constants/todo\";\r\n\r\nexport const setCurrentFolderByIdAction = (id: number) =>\r\n  action(constants.SET_CURRENT_FOLDER, { id });\r\n\r\nexport const toggleCheckedAction = (id: number) =>\r\n  action(constants.TOGGLE_CHECKED, { id });\r\n\r\nexport const addGoalAction = (text: string) =>\r\n  action(constants.ADD_GOAL, { text });\r\n\r\nexport const deleteFolderAction = (id: number) =>\r\n  action(constants.DELETE_FOLDER, { id });\r\n\r\nexport const deleteDoneAction = () => action(constants.DELETE_DONE);\r\n\r\nexport const addFolderAction = (headline: string, description: string) =>\r\n  action(constants.ADD_FOLDER, { headline, description });\r\n\r\nexport const swapTasksAction = (from: number, to: number) =>\r\n  action(constants.SWAP_TASKS, { from, to });\r\n\r\nexport const swapFoldersAction = (from: number, to: number) =>\r\n  action(constants.SWAP_FOLDERS, { from, to });\r\n\r\nexport const stopEditingAction = () => action(constants.STOP_EDITING);\r\n\r\nexport const toggleEditingAction = (id: number) =>\r\n  action(constants.START_EDITING, { id });\r\n\r\nexport const setGoalAction = (id: number, newGoal: string) =>\r\n  action(constants.SET_GOAL, { id, newGoal });\r\n","import React, { useCallback } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Folders from \"./components/Folders/Folders\";\r\nimport store, { useTypedSelector } from \"./redux/reduxStore\";\r\nimport { Provider, useDispatch } from \"react-redux\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport {\r\n  setDrawerModeAction,\r\n  setIsLightAction,\r\n  setDrawerOpenedAction,\r\n} from \"./redux/actions/ui\";\r\nimport { DrawerTypeEnum } from \"./types/index_d\";\r\n\r\nconst lightTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"light\",\r\n  },\r\n});\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: {\r\n      main: \"#E87509\",\r\n      dark: \"#C04D09\",\r\n    },\r\n    secondary: {\r\n      main: \"#FF69B4\",\r\n    },\r\n    action: {\r\n      disabledBackground: \"#121212\",\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLight = useTypedSelector((state) => state.ui.isLight);\r\n  const drawerMode = useTypedSelector((state) => state.ui.drawerMode);\r\n  const drawerOpened = useTypedSelector((state) => state.ui.drawerOpened);\r\n\r\n  const setIsLight = useCallback(\r\n    (light: boolean) => dispatch(setIsLightAction(light)),\r\n    [dispatch]\r\n  );\r\n  const setDrawerMode = useCallback(\r\n    (mode: DrawerTypeEnum) => dispatch(setDrawerModeAction(mode)),\r\n    [dispatch]\r\n  );\r\n  const setDrawerOpened = (open: boolean) =>\r\n    dispatch(setDrawerOpenedAction(open));\r\n\r\n  return (\r\n    <div className=\"app-wrapper\">\r\n      <ThemeProvider theme={isLight ? lightTheme : darkTheme}>\r\n        <Header\r\n          isLight={isLight}\r\n          setIsLight={setIsLight}\r\n          open={drawerOpened}\r\n          setOpen={setDrawerOpened}\r\n          setDrawerMode={setDrawerMode}\r\n          drawerMode={drawerMode}\r\n        >\r\n          <div>\r\n            <Route path=\"/folders/:currentFolder?\" render={() => <Folders />} />\r\n            <Route path=\"/\" exact render={() => <Folders />} />\r\n            <Route path=\"/react-todolist\" exact render={() => <Folders />} />\r\n          </div>\r\n        </Header>\r\n      </ThemeProvider>\r\n      <div\r\n        className={drawerOpened ? \"overlay\" : \"\"}\r\n        onClick={() => {\r\n          setDrawerOpened(false);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default MainApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}